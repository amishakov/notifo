{
  "x-generator": "NSwag v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "Notifo API",
    "version": "1.0.0",
    "x-logo": {
      "url": "/logo.svg"
    }
  },
  "servers": [
    {
      "url": "https://localhost:5002"
    }
  ],
  "paths": {
    "/api/me": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the current user.",
        "operationId": "User_GetUser",
        "responses": {
          "200": {
            "description": "User returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getUser"
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update the user.",
        "operationId": "User_PostUser",
        "requestBody": {
          "x-name": "request",
          "description": "The upsert request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "Users upserted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postUser"
      }
    },
    "/api/me/admin": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the current admin user.",
        "operationId": "User_GetAdminUser",
        "responses": {
          "200": {
            "description": "User returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminProfileDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getAdminUser"
      }
    },
    "/api/me/topics": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Query the user topics.",
        "operationId": "User_GetTopics",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "The optional language.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User subscriptions returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTopicDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getTopics"
      }
    },
    "/api/me/subscriptions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Query the user subscriptions.",
        "operationId": "User_GetMySubscriptions",
        "parameters": [
          {
            "name": "Topics",
            "in": "query",
            "description": "The topics we are interested in.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "User subscriptions returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfSubscriptionDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getMySubscriptions"
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Upserts or deletes my subscriptions.",
        "description": "User Id and App Id are resolved using the API token.",
        "operationId": "User_PostMySubscriptions",
        "requestBody": {
          "x-name": "request",
          "description": "The subscription settings.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeManyDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": "User subscribed."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postMySubscriptions"
      }
    },
    "/api/me/subscriptions/{topic}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets a user subscription.",
        "description": "User Id and App Id are resolved using the API token.",
        "operationId": "User_GetMySubscription",
        "parameters": [
          {
            "name": "topic",
            "in": "path",
            "required": true,
            "description": "The topic path.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriptionDto"
                }
              }
            }
          },
          "404": {
            "description": "Subscription does not exist."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getMySubscription"
      }
    },
    "/api/me/subscriptions/{prefix}": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Remove my subscription.",
        "description": "User Id and App Id are resolved using the API token.",
        "operationId": "User_DeleteSubscription",
        "parameters": [
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "description": "The topic prefix.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "User unsubscribed."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteSubscription"
      }
    },
    "/api/apps/{appId}/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Query users.",
        "operationId": "Users_GetUsers",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the users belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "withDetails",
            "in": "query",
            "description": "Provide extra details, might be expensive.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Users returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfUserDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getUsers"
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Upsert users.",
        "operationId": "Users_PostUsers",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the users belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The upsert request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertUsersDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Users upserted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserDto"
                  }
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postUsers"
      }
    },
    "/api/apps/{appId}/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a user.",
        "operationId": "Users_GetUser",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the user belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "withDetails",
            "in": "query",
            "description": "Provide extra details, might be expensive.",
            "schema": {
              "type": "boolean",
              "default": false
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "User returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "404": {
            "description": "User or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getUser"
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete a user.",
        "operationId": "Users_DeleteUser",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the users belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user id to delete.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted."
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteUser"
      }
    },
    "/api/apps/{appId}/users/{id}/subscriptions": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Query user subscriptions.",
        "operationId": "Users_GetSubscriptions",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the user belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "User subscriptions returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfSubscriptionDto"
                }
              }
            }
          },
          "404": {
            "description": "User or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getSubscriptions"
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Upserts or deletes multiple user subscriptions.",
        "operationId": "Users_PostSubscriptions",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the user belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The subscription object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscribeManyDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "User subscribed."
          },
          "404": {
            "description": "User or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postSubscriptions"
      }
    },
    "/api/apps/{appId}/users/{id}/subscriptions/{prefix}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Unsubscribes a user from a subscription.",
        "operationId": "Users_DeleteSubscription",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the user belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "description": "The topic prefix.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "User unsubscribed."
          },
          "404": {
            "description": "User or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteSubscription"
      }
    },
    "/api/apps/{appId}/users/{id}/allowed-topics": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add an allowed topic.",
        "operationId": "Users_PostAllowedTopic",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the users belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The upsert request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAllowedTopicDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "User updated."
          },
          "404": {
            "description": "User or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postAllowedTopic"
      }
    },
    "/api/apps/{appId}/users/{id}/allowed-topics/{prefix}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove an allowed topic.",
        "operationId": "Users_DeleteAllowedTopic",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the users belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "prefix",
            "in": "path",
            "required": true,
            "description": "The topic prefix.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "User updated."
          },
          "404": {
            "description": "User or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteAllowedTopic"
      }
    },
    "/api/apps/{appId}/users/{id}/mobilepush/{token}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove an web push token.",
        "operationId": "Users_DeleteMobilePushToken",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the users belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "The token.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "User updated."
          },
          "404": {
            "description": "User or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteMobilePushToken"
      }
    },
    "/api/apps/{appId}/users/{id}/webpush/{endpoint}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove an web push subscription.",
        "operationId": "Users_DeleteWebPushSubscription",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the users belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "endpoint",
            "in": "path",
            "required": true,
            "description": "The endpoint.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "204": {
            "description": "User updated."
          },
          "404": {
            "description": "User or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteWebPushSubscription"
      }
    },
    "/api/apps/{appId}/topics": {
      "get": {
        "tags": [
          "Topics"
        ],
        "summary": "Query topics.",
        "operationId": "Topics_GetTopics",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the topics belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "Scope",
            "in": "query",
            "description": "The scope of the query.",
            "schema": {
              "$ref": "#/components/schemas/TopicQueryScope"
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Topics returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfTopicDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getTopics"
      },
      "post": {
        "tags": [
          "Topics"
        ],
        "summary": "Upsert topics.",
        "operationId": "Topics_PostTopics",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the topics belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The upsert request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertTopicsDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Named topics upserted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TopicDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postTopics"
      }
    },
    "/api/apps/{appId}/topics/{path}": {
      "delete": {
        "tags": [
          "Topics"
        ],
        "summary": "Delete a topic.",
        "operationId": "Topics_DeleteTopic",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the topics belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "path",
            "in": "path",
            "required": true,
            "description": "The path of the topic to delete.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Topic deleted."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteTopic"
      }
    },
    "/api/apps/{appId}/templates": {
      "get": {
        "tags": [
          "Templates"
        ],
        "summary": "Query templates.",
        "operationId": "Templates_GetTemplates",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the templates belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Templates returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfTemplateDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getTemplates"
      },
      "post": {
        "tags": [
          "Templates"
        ],
        "summary": "Upsert templates.",
        "operationId": "Templates_PostTemplates",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The upsert request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertTemplatesDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Templates upserted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postTemplates"
      }
    },
    "/api/apps/{appId}/templates/{code}": {
      "delete": {
        "tags": [
          "Templates"
        ],
        "summary": "Delete a template.",
        "operationId": "Templates_DeleteTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template code to delete.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Template deleted."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteTemplate"
      }
    },
    "/api/system-users": {
      "get": {
        "tags": [
          "SystemUsers"
        ],
        "summary": "Query users.",
        "operationId": "SystemUsers_GetUsers",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Users returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfSystemUserDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getUsers"
      },
      "post": {
        "tags": [
          "SystemUsers"
        ],
        "summary": "Create a user.",
        "operationId": "SystemUsers_PostUser",
        "requestBody": {
          "x-name": "request",
          "description": "The create request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSystemUserDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "201": {
            "description": "User created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemUserDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postUser"
      }
    },
    "/api/system-users/{id}": {
      "get": {
        "tags": [
          "SystemUsers"
        ],
        "summary": "Get a user.",
        "operationId": "SystemUsers_GetUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemUserDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getUser"
      },
      "put": {
        "tags": [
          "SystemUsers"
        ],
        "summary": "Update the user.",
        "operationId": "SystemUsers_PutUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The update request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSystemUserDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "User updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemUserDto"
                }
              }
            }
          },
          "403": {
            "description": "User cannot be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "putUser"
      },
      "delete": {
        "tags": [
          "SystemUsers"
        ],
        "summary": "Delete the user.",
        "operationId": "SystemUsers_DeleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted."
          },
          "403": {
            "description": "User cannot be deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteUser"
      }
    },
    "/api/system-users/{id}/lock": {
      "put": {
        "tags": [
          "SystemUsers"
        ],
        "summary": "Lock the user.",
        "operationId": "SystemUsers_LockUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemUserDto"
                }
              }
            }
          },
          "403": {
            "description": "User cannot be locked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "lockUser"
      }
    },
    "/api/system-users/{id}/unlock": {
      "put": {
        "tags": [
          "SystemUsers"
        ],
        "summary": "Unlock the user.",
        "operationId": "SystemUsers_UnlockUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "User unlocked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemUserDto"
                }
              }
            }
          },
          "403": {
            "description": "User cannot be unlocked.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "unlockUser"
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "Ping"
        ],
        "summary": "Get ping status of the API.",
        "description": "Can be used to test, if the API is alive and responding.",
        "operationId": "Ping_GetOldPing",
        "responses": {
          "204": {
            "description": "Service ping successful."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-method-name": "getOldPing"
      }
    },
    "/api/ping": {
      "get": {
        "tags": [
          "Ping"
        ],
        "summary": "Get ping status of the API.",
        "description": "Can be used to test, if the API is alive and responding.",
        "operationId": "Ping_GetPing",
        "responses": {
          "204": {
            "description": "Service ping successful."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getPing"
      }
    },
    "/api/info": {
      "get": {
        "tags": [
          "Ping"
        ],
        "summary": "Get some info about the API.",
        "description": "Can be used to test, if the API is alive and responding.",
        "operationId": "Ping_GetInfo",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getInfo"
      }
    },
    "/api/apps/{appId}/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Query notifications.",
        "operationId": "Notifications_GetAllNotifications",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the user belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "Channels",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The active channels.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "Channel",
            "in": "query",
            "description": "The source channel.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "CorrelationId",
            "in": "query",
            "description": "The correlation ID, that can be used to query notifications.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 6
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "description": "User notifications returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfUserNotificationDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "User or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getAllNotifications"
      }
    },
    "/api/apps/{appId}/users/{id}/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Query user notifications.",
        "operationId": "Notifications_GetNotifications",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the user belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The user id.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "Channels",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The active channels.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 3
          },
          {
            "name": "Channel",
            "in": "query",
            "description": "The source channel.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "CorrelationId",
            "in": "query",
            "description": "The correlation ID, that can be used to query notifications.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 7
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 8
          }
        ],
        "responses": {
          "200": {
            "description": "User notifications returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfUserNotificationDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "User or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getNotifications"
      }
    },
    "/api/me/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Query user notifications of the current user.",
        "operationId": "Notifications_GetMyNotifications",
        "parameters": [
          {
            "name": "Channels",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The active channels.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 1
          },
          {
            "name": "Channel",
            "in": "query",
            "description": "The source channel.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "CorrelationId",
            "in": "query",
            "description": "The correlation ID, that can be used to query notifications.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 5
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 6
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfUserNotificationDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getMyNotifications"
      }
    },
    "/api/me/notifications/archive": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Query archived user notifications of the current user.",
        "operationId": "Notifications_GetMyArchive",
        "parameters": [
          {
            "name": "channel",
            "in": "query",
            "description": "The tracking channel.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfUserNotificationDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getMyArchive"
      }
    },
    "/api/me/notifications/device": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Query user notifications of the current user for a specific device.",
        "operationId": "Notifications_GetMyDeviceNotifications",
        "parameters": [
          {
            "name": "DeviceIdentifier",
            "in": "query",
            "description": "The device identifier (aka mobile push token).",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "After",
            "in": "query",
            "description": "The max age of the notifications.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "x-position": 2
          },
          {
            "name": "Scope",
            "in": "query",
            "description": "The scope of the query.",
            "schema": {
              "$ref": "#/components/schemas/DeviceNotificationsQueryScope"
            },
            "x-position": 3
          },
          {
            "name": "Take",
            "in": "query",
            "description": "The number of notifications to query.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfUserNotificationDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getMyDeviceNotifications"
      }
    },
    "/api/me/notifications/handled": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Confirms the user notifications for the current user.",
        "operationId": "Notifications_ConfirmMe",
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TrackNotificationDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": "Notifications updated."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "confirmMe"
      }
    },
    "/api/me/mobilepush": {
      "get": {
        "tags": [
          "MobilePush"
        ],
        "summary": "Returns the mobile push tokens.",
        "operationId": "MobilePush_GetMyToken",
        "responses": {
          "200": {
            "description": "Mobile push tokens returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfMobilePushTokenDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getMyToken"
      },
      "post": {
        "tags": [
          "MobilePush"
        ],
        "summary": "Register a mobile push token for the current user.",
        "operationId": "MobilePush_PostMyToken",
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterMobileTokenDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": "Mobile push token registered."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postMyToken"
      }
    },
    "/api/me/mobilepush/{token}": {
      "delete": {
        "tags": [
          "MobilePush"
        ],
        "summary": "Deletes a mobile push token for the current user.",
        "operationId": "MobilePush_DeleteMyToken",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "description": "The token to remove.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "204": {
            "description": "Mobile push token removed."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteMyToken"
      }
    },
    "/api/apps/{appId}/media": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Query media items.",
        "operationId": "Media_GetMedias",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the media belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Media returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfMediaDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getMedias"
      },
      "post": {
        "tags": [
          "Media"
        ],
        "summary": "Upload a media object.",
        "operationId": "Media_Upload",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app id where the media belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Media uploaded."
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "upload"
      }
    },
    "/api/apps/{appId}/media/{fileName}": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download a media object.",
        "operationId": "Media_Download",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app id where the media belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "description": "The name of the media to download.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "cache",
            "in": "query",
            "description": "The cache duration.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "download",
            "in": "query",
            "description": "Set it to 1 to create a download response.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "bg",
            "in": "query",
            "description": "Optional background color.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "width",
            "in": "query",
            "description": "The target width when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "height",
            "in": "query",
            "description": "The target height when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "quality",
            "in": "query",
            "description": "The target quality when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "preset",
            "in": "query",
            "description": "A preset dimension.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The resize mode.",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ResizeMode"
            },
            "x-position": 10
          },
          {
            "name": "focusX",
            "in": "query",
            "description": "The x position of the focues point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "focusY",
            "in": "query",
            "description": "The y position of the focues point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 12
          },
          {
            "name": "force",
            "in": "query",
            "description": "True to resize it and clear the cache.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 13
          },
          {
            "name": "emptyOnFailure",
            "in": "query",
            "description": "True, to return an empty image on failure.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 14
          }
        ],
        "responses": {
          "200": {
            "description": "Media returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Media or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "download"
      },
      "delete": {
        "tags": [
          "Media"
        ],
        "summary": "Delete a media.",
        "operationId": "Media_Delete",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app id where the media belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "description": "The file name of the media.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Media deleted."
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "delete"
      }
    },
    "/api/asset/{appId}/{fileName}": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download a media object.",
        "operationId": "Media_Download2",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app id where the media belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "description": "The name of the media to download.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "cache",
            "in": "query",
            "description": "The cache duration.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "download",
            "in": "query",
            "description": "Set it to 1 to create a download response.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "bg",
            "in": "query",
            "description": "Optional background color.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "width",
            "in": "query",
            "description": "The target width when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "height",
            "in": "query",
            "description": "The target height when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "quality",
            "in": "query",
            "description": "The target quality when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "preset",
            "in": "query",
            "description": "A preset dimension.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The resize mode.",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ResizeMode"
            },
            "x-position": 10
          },
          {
            "name": "focusX",
            "in": "query",
            "description": "The x position of the focues point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "focusY",
            "in": "query",
            "description": "The y position of the focues point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 12
          },
          {
            "name": "force",
            "in": "query",
            "description": "True to resize it and clear the cache.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 13
          },
          {
            "name": "emptyOnFailure",
            "in": "query",
            "description": "True, to return an empty image on failure.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 14
          }
        ],
        "responses": {
          "200": {
            "description": "Media returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Media or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "download2"
      }
    },
    "/api/assets/{appId}/{fileName}": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download a media object.",
        "operationId": "Media_Download3",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app id where the media belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "fileName",
            "in": "path",
            "required": true,
            "description": "The name of the media to download.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "cache",
            "in": "query",
            "description": "The cache duration.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 3
          },
          {
            "name": "download",
            "in": "query",
            "description": "Set it to 1 to create a download response.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "bg",
            "in": "query",
            "description": "Optional background color.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "width",
            "in": "query",
            "description": "The target width when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "height",
            "in": "query",
            "description": "The target height when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "quality",
            "in": "query",
            "description": "The target quality when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "preset",
            "in": "query",
            "description": "A preset dimension.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 9
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The resize mode.",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ResizeMode"
            },
            "x-position": 10
          },
          {
            "name": "focusX",
            "in": "query",
            "description": "The x position of the focues point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "focusY",
            "in": "query",
            "description": "The y position of the focues point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 12
          },
          {
            "name": "force",
            "in": "query",
            "description": "True to resize it and clear the cache.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 13
          },
          {
            "name": "emptyOnFailure",
            "in": "query",
            "description": "True, to return an empty image on failure.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 14
          }
        ],
        "responses": {
          "200": {
            "description": "Media returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Media or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "download3"
      }
    },
    "/api/assets/proxy": {
      "get": {
        "tags": [
          "Media"
        ],
        "summary": "Download a media object.",
        "operationId": "MediaProxy_ProxyImage",
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "The app id where the media belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "cache",
            "in": "query",
            "description": "The cache duration.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "x-position": 2
          },
          {
            "name": "download",
            "in": "query",
            "description": "Set it to 1 to create a download response.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "bg",
            "in": "query",
            "description": "Optional background color.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 4
          },
          {
            "name": "width",
            "in": "query",
            "description": "The target width when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "height",
            "in": "query",
            "description": "The target height when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 6
          },
          {
            "name": "quality",
            "in": "query",
            "description": "The target quality when an image.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "x-position": 7
          },
          {
            "name": "preset",
            "in": "query",
            "description": "A preset dimension.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 8
          },
          {
            "name": "mode",
            "in": "query",
            "description": "The resize mode.",
            "schema": {
              "nullable": true,
              "$ref": "#/components/schemas/ResizeMode"
            },
            "x-position": 9
          },
          {
            "name": "focusX",
            "in": "query",
            "description": "The x position of the focues point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 10
          },
          {
            "name": "focusY",
            "in": "query",
            "description": "The y position of the focues point.",
            "schema": {
              "type": "number",
              "format": "float",
              "nullable": true
            },
            "x-position": 11
          },
          {
            "name": "force",
            "in": "query",
            "description": "True to resize it and clear the cache.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 12
          },
          {
            "name": "emptyOnFailure",
            "in": "query",
            "description": "True, to return an empty image on failure.",
            "schema": {
              "type": "boolean"
            },
            "x-position": 13
          }
        ],
        "responses": {
          "200": {
            "description": "Media returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Media or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "proxyImage"
      }
    },
    "/api/apps/{appId}/logs": {
      "get": {
        "tags": [
          "Logs"
        ],
        "summary": "Query log entries.",
        "operationId": "Logs_GetLogs",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the log entries belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "Systems",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The systems.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "UserId",
            "in": "query",
            "description": "The user id.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "EventCode",
            "in": "query",
            "description": "The event code.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 5
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 6
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 7
          }
        ],
        "responses": {
          "200": {
            "description": "Log entries returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfLogEntryDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getLogs"
      }
    },
    "/api/apps/{appId}/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Query events.",
        "operationId": "Events_GetEvents",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the events belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "Channels",
            "in": "query",
            "style": "form",
            "explode": true,
            "description": "The active channels.",
            "schema": {
              "type": "array",
              "nullable": true,
              "items": {
                "type": "string"
              }
            },
            "x-position": 2
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 5
          }
        ],
        "responses": {
          "200": {
            "description": "Events returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfEventDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getEvents"
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Publish events.",
        "operationId": "Events_PostEvents",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the events belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The publish request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishManyDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "204": {
            "description": "Events created."
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postEvents"
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Cancels a scheduled event.",
        "operationId": "Events_CancelEvent",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app where the events belongs to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The cancel request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelEventDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "cancelEvent"
      }
    },
    "/api/me/events": {
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Publish an event for the current user.",
        "operationId": "Events_PostMyEvents",
        "requestBody": {
          "x-name": "request",
          "description": "The publish request.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "204": {
            "description": "Event created."
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postMyEvents"
      }
    },
    "/api/diagnostics/dump": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Creates a dump and writes it into storage..",
        "operationId": "Diagnostics_GetDump",
        "responses": {
          "204": {
            "description": "Dump created successful."
          },
          "501": {
            "description": "Not configured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getDump"
      }
    },
    "/api/diagnostics/gcdump": {
      "get": {
        "tags": [
          "Diagnostics"
        ],
        "summary": "Creates a gc dump and writes it into storage.",
        "operationId": "Diagnostics_GetGCDump",
        "responses": {
          "204": {
            "description": "Dump created successful."
          },
          "501": {
            "description": "Not configured.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getGCDump"
      }
    },
    "/api/timezones": {
      "get": {
        "tags": [
          "Configs"
        ],
        "summary": "Get all supported timezones.",
        "operationId": "Configs_GetTimezones",
        "responses": {
          "200": {
            "description": "Timezones returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getTimezones"
      }
    },
    "/api/languages": {
      "get": {
        "tags": [
          "Configs"
        ],
        "summary": "Get all supported languages.",
        "operationId": "Configs_GetLanguages",
        "responses": {
          "200": {
            "description": "Languages returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getLanguages"
      }
    },
    "/api/mjml/schema": {
      "get": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Gets the mjml schema.",
        "operationId": "EmailTemplatePreview_GetSchema",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MjmlSchema"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getSchema"
      }
    },
    "/api/apps/{appId}/email-templates/{id}/preview": {
      "get": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Get the HTML preview for a channel template.",
        "operationId": "EmailTemplatePreview_GetPreview",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The template ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Channel template preview returned.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Channel template not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getPreview"
      }
    },
    "/api/apps/{appId}/email-templates/render": {
      "post": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Render a preview for a email template.",
        "operationId": "EmailTemplatePreview_PostPreview",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The template to render.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailPreviewRequestDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Template rendered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailPreviewDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postPreview"
      }
    },
    "/api/apps/{appId}/email-templates": {
      "get": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Get the channel templates.",
        "operationId": "EmailTemplates_GetTemplates",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Channel templates returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfChannelTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getTemplates"
      },
      "post": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Create a channel template.",
        "operationId": "EmailTemplates_PostTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelTemplateDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Channel template created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfEmailTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postTemplate"
      }
    },
    "/api/apps/{appId}/email-templates/properties": {
      "get": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Get the template properties.",
        "operationId": "EmailTemplates_GetProperties",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The id of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Channel templates properties returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfTemplatePropertyDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getProperties"
      }
    },
    "/api/apps/{appId}/email-templates/{id}": {
      "get": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Get the channel template by id.",
        "operationId": "EmailTemplates_GetTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The template ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Channel templates returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfEmailTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getTemplate"
      }
    },
    "/api/apps/{appId}/email-templates/{code}": {
      "post": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Create an app template language.",
        "operationId": "EmailTemplates_PostTemplateLanguage",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template code.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelTemplateLanguageDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Channel template created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfEmailTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postTemplateLanguage"
      },
      "put": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Update an app template.",
        "operationId": "EmailTemplates_PutTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template code.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChannelTemplateDtoOfEmailTemplateDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfEmailTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "putTemplate"
      },
      "delete": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Delete a channel template.",
        "operationId": "EmailTemplates_DeleteTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Channel template deleted."
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteTemplate"
      }
    },
    "/api/apps/{appId}/email-templates/{code}/{language}": {
      "put": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Update a channel template language.",
        "operationId": "EmailTemplates_PutTemplateLanguage",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template code.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "The language.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailTemplateDto"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfEmailTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "putTemplateLanguage"
      },
      "delete": {
        "tags": [
          "EmailTemplates"
        ],
        "summary": "Delete a language channel template.",
        "operationId": "EmailTemplates_DeleteTemplateLanguage",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "The language.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfEmailTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteTemplateLanguage"
      }
    },
    "/api/apps/{appId}/messaging-templates": {
      "get": {
        "tags": [
          "MessagingTemplates"
        ],
        "summary": "Get the channel templates.",
        "operationId": "MessagingTemplates_GetTemplates",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Channel templates returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfChannelTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getTemplates"
      },
      "post": {
        "tags": [
          "MessagingTemplates"
        ],
        "summary": "Create a channel template.",
        "operationId": "MessagingTemplates_PostTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelTemplateDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Channel template created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfMessagingTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postTemplate"
      }
    },
    "/api/apps/{appId}/messaging-templates/properties": {
      "get": {
        "tags": [
          "MessagingTemplates"
        ],
        "summary": "Get the template properties.",
        "operationId": "MessagingTemplates_GetProperties",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The id of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Channel templates properties returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfTemplatePropertyDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getProperties"
      }
    },
    "/api/apps/{appId}/messaging-templates/{id}": {
      "get": {
        "tags": [
          "MessagingTemplates"
        ],
        "summary": "Get the channel template by id.",
        "operationId": "MessagingTemplates_GetTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The template ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Channel templates returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfMessagingTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getTemplate"
      }
    },
    "/api/apps/{appId}/messaging-templates/{code}": {
      "post": {
        "tags": [
          "MessagingTemplates"
        ],
        "summary": "Create an app template language.",
        "operationId": "MessagingTemplates_PostTemplateLanguage",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template code.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelTemplateLanguageDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Channel template created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfMessagingTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postTemplateLanguage"
      },
      "put": {
        "tags": [
          "MessagingTemplates"
        ],
        "summary": "Update an app template.",
        "operationId": "MessagingTemplates_PutTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template code.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChannelTemplateDtoOfMessagingTemplateDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfMessagingTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "putTemplate"
      },
      "delete": {
        "tags": [
          "MessagingTemplates"
        ],
        "summary": "Delete a channel template.",
        "operationId": "MessagingTemplates_DeleteTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Channel template deleted."
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteTemplate"
      }
    },
    "/api/apps/{appId}/messaging-templates/{code}/{language}": {
      "put": {
        "tags": [
          "MessagingTemplates"
        ],
        "summary": "Update a channel template language.",
        "operationId": "MessagingTemplates_PutTemplateLanguage",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template code.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "The language.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagingTemplateDto"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfMessagingTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "putTemplateLanguage"
      },
      "delete": {
        "tags": [
          "MessagingTemplates"
        ],
        "summary": "Delete a language channel template.",
        "operationId": "MessagingTemplates_DeleteTemplateLanguage",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "The language.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfMessagingTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteTemplateLanguage"
      }
    },
    "/api/apps/{appId}/sms-templates": {
      "get": {
        "tags": [
          "SmsTemplates"
        ],
        "summary": "Get the channel templates.",
        "operationId": "SmsTemplates_GetTemplates",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "query",
            "in": "query",
            "description": "The optional query to search for items.",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of items to return.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of items to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 4
          }
        ],
        "responses": {
          "200": {
            "description": "Channel templates returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfChannelTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getTemplates"
      },
      "post": {
        "tags": [
          "SmsTemplates"
        ],
        "summary": "Create a channel template.",
        "operationId": "SmsTemplates_PostTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelTemplateDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Channel template created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfSmsTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postTemplate"
      }
    },
    "/api/apps/{appId}/sms-templates/properties": {
      "get": {
        "tags": [
          "SmsTemplates"
        ],
        "summary": "Get the template properties.",
        "operationId": "SmsTemplates_GetProperties",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The id of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Channel templates properties returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResponseDtoOfTemplatePropertyDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getProperties"
      }
    },
    "/api/apps/{appId}/sms-templates/{id}": {
      "get": {
        "tags": [
          "SmsTemplates"
        ],
        "summary": "Get the channel template by id.",
        "operationId": "SmsTemplates_GetTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The template ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Channel templates returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfSmsTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getTemplate"
      }
    },
    "/api/apps/{appId}/sms-templates/{code}": {
      "post": {
        "tags": [
          "SmsTemplates"
        ],
        "summary": "Create an app template language.",
        "operationId": "SmsTemplates_PostTemplateLanguage",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template code.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelTemplateLanguageDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "Channel template created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfSmsTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postTemplateLanguage"
      },
      "put": {
        "tags": [
          "SmsTemplates"
        ],
        "summary": "Update an app template.",
        "operationId": "SmsTemplates_PutTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template code.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChannelTemplateDtoOfSmsTemplateDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfSmsTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "putTemplate"
      },
      "delete": {
        "tags": [
          "SmsTemplates"
        ],
        "summary": "Delete a channel template.",
        "operationId": "SmsTemplates_DeleteTemplate",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "Channel template deleted."
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteTemplate"
      }
    },
    "/api/apps/{appId}/sms-templates/{code}/{language}": {
      "put": {
        "tags": [
          "SmsTemplates"
        ],
        "summary": "Update a channel template language.",
        "operationId": "SmsTemplates_PutTemplateLanguage",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template code.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "The language.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmsTemplateDto"
              }
            }
          },
          "required": true,
          "x-position": 4
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfSmsTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "putTemplateLanguage"
      },
      "delete": {
        "tags": [
          "SmsTemplates"
        ],
        "summary": "Delete a language channel template.",
        "operationId": "SmsTemplates_DeleteTemplateLanguage",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "path",
            "required": true,
            "description": "The template ID.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          },
          {
            "name": "language",
            "in": "path",
            "required": true,
            "description": "The language.",
            "schema": {
              "type": "string"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelTemplateDetailsDtoOfSmsTemplateDto"
                }
              }
            }
          },
          "404": {
            "description": "Channel template or app not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteTemplateLanguage"
      }
    },
    "/api/apps": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Get the user apps.",
        "operationId": "Apps_GetApps",
        "responses": {
          "200": {
            "description": "Apps returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppDto"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getApps"
      },
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Create an app.",
        "operationId": "Apps_PostApp",
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertAppDto"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "App created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postApp"
      }
    },
    "/api/apps/{appId}": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Get app by ID.",
        "operationId": "Apps_GetApp",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "App returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getApp"
      },
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Update an app.",
        "operationId": "Apps_PutApp",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The app id to update.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertAppDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "App updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "putApp"
      }
    },
    "/api/apps/{appId}/auth": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Get app auth settings by ID.",
        "operationId": "Apps_GetAuthScheme",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "App auth settings returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSchemeValueDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getAuthScheme"
      },
      "put": {
        "tags": [
          "Apps"
        ],
        "summary": "Updates the auth settings of the app.",
        "operationId": "Apps_UpsertAuthScheme",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthSchemeValueDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "App auth settings returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSchemeValueDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "upsertAuthScheme"
      }
    },
    "/api/apps/{appId}/contributors": {
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Add an app contributor.",
        "operationId": "Apps_PostContributor",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContributorDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "Apps returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postContributor"
      }
    },
    "/api/apps/{appId}/contributors/{contributorId}": {
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Delete an app contributor.",
        "operationId": "Apps_DeleteContributor",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "contributorId",
            "in": "path",
            "required": true,
            "description": "The contributor to remove.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Apps returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppDetailsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteContributor"
      }
    },
    "/api/apps/{appId}/integrations": {
      "get": {
        "tags": [
          "Apps"
        ],
        "summary": "Get the app integrations.",
        "operationId": "Apps_GetIntegrations",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the integrations belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "App email templates returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfiguredIntegrationsDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "getIntegrations"
      }
    },
    "/api/apps/{appId}/integration": {
      "post": {
        "tags": [
          "Apps"
        ],
        "summary": "Create an app integrations.",
        "operationId": "Apps_PostIntegration",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the integration belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntegrationDto"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "App integration created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationCreatedDto"
                }
              }
            }
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "postIntegration"
      }
    },
    "/api/apps/{appId}/integrations/{id}": {
      "put": {
        "tags": [
          "Apps"
        ],
        "summary": "Update an app integration.",
        "operationId": "Apps_PutIntegration",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the integration belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the integration.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "requestBody": {
          "x-name": "request",
          "description": "The request object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIntegrationDto"
              }
            }
          },
          "required": true,
          "x-position": 3
        },
        "responses": {
          "204": {
            "description": "App integration updated."
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "putIntegration"
      },
      "delete": {
        "tags": [
          "Apps"
        ],
        "summary": "Delete an app integration.",
        "operationId": "Apps_DeleteIntegration",
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "description": "The ID of the app where the email templates belong to.",
            "schema": {
              "type": "string"
            },
            "x-position": 1
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the integration.",
            "schema": {
              "type": "string"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "204": {
            "description": "App integration deleted."
          },
          "404": {
            "description": "App not found."
          },
          "400": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Operation failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        },
        "x-method-name": "deleteIntegration"
      }
    }
  },
  "components": {
    "schemas": {
      "ProfileDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "fullName",
          "emailAddress",
          "allowedTopics",
          "supportedLanguages",
          "supportedTimezones",
          "settings"
        ],
        "properties": {
          "fullName": {
            "type": "string",
            "description": "The full name of the user."
          },
          "emailAddress": {
            "type": "string",
            "description": "The email of the user."
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number.",
            "nullable": true
          },
          "allowedTopics": {
            "type": "array",
            "description": "The allowed Topics.",
            "items": {
              "type": "string"
            }
          },
          "preferredLanguage": {
            "type": "string",
            "description": "The preferred language of the user.",
            "nullable": true
          },
          "preferredTimezone": {
            "type": "string",
            "description": "The timezone of the user.",
            "nullable": true
          },
          "supportedLanguages": {
            "type": "array",
            "description": "The supported languages.",
            "items": {
              "type": "string"
            }
          },
          "supportedTimezones": {
            "type": "array",
            "description": "The supported timezones.",
            "items": {
              "type": "string"
            }
          },
          "settings": {
            "type": "object",
            "description": "Notification settings per channel.",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelSettingDto"
            }
          }
        }
      },
      "ChannelSettingDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "send",
          "condition",
          "required"
        ],
        "properties": {
          "send": {
            "description": "Defines if to send a notification through this channel.",
            "$ref": "#/components/schemas/ChannelSend"
          },
          "condition": {
            "description": "Defines when to send a notification through this channel.",
            "$ref": "#/components/schemas/ChannelCondition"
          },
          "required": {
            "description": "Defines the requirements for this channel.",
            "$ref": "#/components/schemas/ChannelRequired"
          },
          "delayInSeconds": {
            "type": "integer",
            "description": "The delay in seconds.",
            "format": "int32",
            "nullable": true
          },
          "template": {
            "type": "string",
            "description": "The template if the channel supports it.",
            "nullable": true
          },
          "groupKey": {
            "type": "string",
            "description": "The grouping key to combine notifications per channel.",
            "nullable": true
          },
          "properties": {
            "description": "Additional properties.",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationProperties"
          }
        }
      },
      "ChannelSend": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Inherit",
          "Send",
          "NotSending",
          "NotAllowed"
        ],
        "enum": [
          "Inherit",
          "Send",
          "NotSending",
          "NotAllowed"
        ]
      },
      "ChannelCondition": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Inherit",
          "IfNotSeen",
          "IfNotConfirmed",
          "Always"
        ],
        "enum": [
          "Inherit",
          "IfNotSeen",
          "IfNotConfirmed",
          "Always"
        ]
      },
      "ChannelRequired": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Inherit",
          "NotRequired",
          "Required"
        ],
        "enum": [
          "Inherit",
          "NotRequired",
          "Required"
        ]
      },
      "NotificationProperties": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "ErrorDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "statusCode"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message.",
            "nullable": true
          },
          "errorCode": {
            "type": "string",
            "description": "The error code.",
            "nullable": true
          },
          "traceId": {
            "type": "string",
            "description": "The optional trace id.",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The error type, usually a link.",
            "nullable": true
          },
          "details": {
            "type": "array",
            "description": "Detailed error messages.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "statusCode": {
            "type": "integer",
            "description": "Status code of the http response.",
            "format": "int32"
          }
        }
      },
      "AdminProfileDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "The token for the integrated app.",
            "nullable": true
          }
        }
      },
      "UpdateProfileDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fullName": {
            "type": "string",
            "description": "The full name of the user.",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number.",
            "nullable": true
          },
          "preferredLanguage": {
            "type": "string",
            "description": "The preferred language of the user.",
            "nullable": true
          },
          "preferredTimezone": {
            "type": "string",
            "description": "The timezone of the user.",
            "nullable": true
          },
          "settings": {
            "type": "object",
            "description": "Notification settings per channel.",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelSettingDto"
            }
          }
        }
      },
      "UserTopicDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "path",
          "name",
          "showAutomatically",
          "channels"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "The path."
          },
          "name": {
            "type": "string",
            "description": "The name."
          },
          "description": {
            "type": "string",
            "description": "The optional description.",
            "nullable": true
          },
          "showAutomatically": {
            "type": "boolean",
            "description": "True to show the topic automatically to new users, e.g. when he accepts push notifications."
          },
          "channels": {
            "type": "object",
            "description": "The channel options.",
            "additionalProperties": {
              "$ref": "#/components/schemas/TopicChannel"
            }
          }
        }
      },
      "TopicChannel": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "NotAllowed",
          "Allowed"
        ],
        "enum": [
          "NotAllowed",
          "Allowed"
        ]
      },
      "ListResponseDtoOfSubscriptionDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/SubscriptionDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "SubscriptionDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "topicPrefix",
          "topicSettings"
        ],
        "properties": {
          "topicPrefix": {
            "type": "string",
            "description": "The topic to add."
          },
          "topicSettings": {
            "type": "object",
            "description": "Notification settings per channel.",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelSettingDto"
            }
          },
          "scheduling": {
            "description": "The scheduling settings.",
            "nullable": true,
            "$ref": "#/components/schemas/SchedulingDto"
          }
        }
      },
      "SchedulingDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "time"
        ],
        "properties": {
          "type": {
            "description": "The scheduling type.",
            "$ref": "#/components/schemas/SchedulingType"
          },
          "nextWeekDay": {
            "description": "To schedule the event at the next day of the week.",
            "nullable": true,
            "$ref": "#/components/schemas/IsoDayOfWeek"
          },
          "date": {
            "type": "string",
            "description": "The scheduling date.",
            "format": "date",
            "nullable": true
          },
          "time": {
            "type": "string",
            "description": "The scheduling time.",
            "format": "time"
          },
          "delayInSeconds": {
            "type": "integer",
            "description": "The delay relative to the server time.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "SchedulingType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "UTC",
          "UserTime"
        ],
        "enum": [
          "UTC",
          "UserTime"
        ]
      },
      "IsoDayOfWeek": {
        "type": "string",
        "description": "Equates the days of the week with their numerical value according to\nISO-8601. This corresponds with System.DayOfWeek except for Sunday, which\nis 7 in the ISO numbering and 0 in System.DayOfWeek.",
        "x-enumNames": [
          "None",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday"
        ],
        "enum": [
          "None",
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday"
        ]
      },
      "SubscribeManyDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "subscribe": {
            "type": "array",
            "description": "A list of topics to create.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/SubscribeDto"
            }
          },
          "unsubscribe": {
            "type": "array",
            "description": "A list of topics to unsubscribe from.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SubscribeDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "topicPrefix"
        ],
        "properties": {
          "topicPrefix": {
            "type": "string",
            "description": "The topic to add.",
            "minLength": 1
          },
          "topicSettings": {
            "type": "object",
            "description": "Notification settings per channel.",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelSettingDto"
            }
          },
          "scheduling": {
            "description": "The scheduling settings.",
            "nullable": true,
            "$ref": "#/components/schemas/SchedulingDto"
          },
          "hasScheduling": {
            "type": "boolean",
            "description": "Indicates whether scheduling should be overriden."
          }
        }
      },
      "ListResponseDtoOfUserDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "UserDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "apiKey",
          "created",
          "lastUpdate",
          "requiresWhitelistedTopics",
          "settings",
          "counters",
          "mobilePushTokens",
          "webPushSubscriptions"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the user."
          },
          "apiKey": {
            "type": "string",
            "description": "The unique api key for the user."
          },
          "fullName": {
            "type": "string",
            "description": "The full name of the user.",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number.",
            "nullable": true
          },
          "preferredLanguage": {
            "type": "string",
            "description": "The preferred language of the user.",
            "nullable": true
          },
          "preferredTimezone": {
            "type": "string",
            "description": "The timezone of the user.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The date time (ISO 8601) when the user has been created.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The date time (ISO 8601) when the user has been updated.",
            "format": "date-time"
          },
          "lastNotification": {
            "type": "string",
            "description": "The date time (ISO 8601) when the user has been received the last notification.",
            "format": "date-time",
            "nullable": true
          },
          "requiresWhitelistedTopics": {
            "type": "boolean",
            "description": "True when only whitelisted topic are allowed."
          },
          "properties": {
            "type": "object",
            "description": "The user properties.",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "scheduling": {
            "description": "The scheduling settings.",
            "nullable": true,
            "$ref": "#/components/schemas/SchedulingDto"
          },
          "settings": {
            "type": "object",
            "description": "Notification settings per channel.",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelSettingDto"
            }
          },
          "counters": {
            "type": "object",
            "description": "The statistics counters.",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "mobilePushTokens": {
            "type": "array",
            "description": "The mobile push tokens.",
            "items": {
              "$ref": "#/components/schemas/MobilePushTokenDto"
            }
          },
          "webPushSubscriptions": {
            "type": "array",
            "description": "The web push subscriptions.",
            "items": {
              "$ref": "#/components/schemas/WebPushSubscriptionDto"
            }
          },
          "userProperties": {
            "type": "array",
            "description": "The supported user properties.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/UserPropertyDto"
            }
          }
        }
      },
      "MobilePushTokenDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "token",
          "deviceType"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The token."
          },
          "deviceType": {
            "description": "The device type.",
            "$ref": "#/components/schemas/MobileDeviceType"
          },
          "deviceIdentifier": {
            "type": "string",
            "description": "A unique identifier for the device.",
            "nullable": true
          },
          "lastWakeup": {
            "type": "string",
            "description": "The last time the device was woken up.",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "MobileDeviceType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Android",
          "iOS"
        ],
        "enum": [
          "Unknown",
          "Android",
          "iOS"
        ]
      },
      "WebPushSubscriptionDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "endpoint"
        ],
        "properties": {
          "endpoint": {
            "type": "string",
            "description": "The endpoint."
          }
        }
      },
      "UserPropertyDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The field name for the property."
          },
          "editorDescription": {
            "type": "string",
            "description": "The optional description.",
            "nullable": true
          },
          "editorLabel": {
            "type": "string",
            "description": "The optional label.",
            "nullable": true
          }
        }
      },
      "UpsertUsersDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "requests"
        ],
        "properties": {
          "requests": {
            "type": "array",
            "description": "The users to update.",
            "items": {
              "$ref": "#/components/schemas/UpsertUserDto"
            }
          }
        }
      },
      "UpsertUserDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the user.",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "description": "The full name of the user.",
            "nullable": true
          },
          "emailAddress": {
            "type": "string",
            "description": "The email of the user.",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "The phone number.",
            "nullable": true
          },
          "preferredLanguage": {
            "type": "string",
            "description": "The preferred language of the user.",
            "nullable": true
          },
          "preferredTimezone": {
            "type": "string",
            "description": "The timezone of the user.",
            "nullable": true
          },
          "requiresWhitelistedTopics": {
            "type": "boolean",
            "description": "True when only whitelisted topic are allowed.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "description": "The user properties.",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            }
          },
          "settings": {
            "type": "object",
            "description": "Notification settings per channel.",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelSettingDto"
            }
          },
          "scheduling": {
            "description": "The scheduling settings.",
            "nullable": true,
            "$ref": "#/components/schemas/SchedulingDto"
          },
          "hasScheduling": {
            "type": "boolean",
            "description": "Indicates whether scheduling should be overriden."
          }
        }
      },
      "AddAllowedTopicDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "prefix"
        ],
        "properties": {
          "prefix": {
            "type": "string",
            "description": "The topic to add.",
            "minLength": 1
          }
        }
      },
      "ListResponseDtoOfTopicDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/TopicDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "TopicDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "path",
          "created",
          "lastUpdate",
          "isExplicit",
          "showAutomatically",
          "counters"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "The topic path."
          },
          "created": {
            "type": "string",
            "description": "The date time (ISO 8601) when the topic has been created.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The date time (ISO 8601) when the topic has been updated.",
            "format": "date-time"
          },
          "isExplicit": {
            "type": "boolean",
            "description": "True when the topic is explicit."
          },
          "name": {
            "description": "The name.",
            "nullable": true,
            "$ref": "#/components/schemas/LocalizedText"
          },
          "description": {
            "description": "The description.",
            "nullable": true,
            "$ref": "#/components/schemas/LocalizedText"
          },
          "showAutomatically": {
            "type": "boolean",
            "description": "True to show the topic automatically to new users, e.g. when he accepts push notifications."
          },
          "channels": {
            "type": "object",
            "description": "The channel settings.",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/TopicChannel"
            }
          },
          "counters": {
            "type": "object",
            "description": "The statistics counters.",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "LocalizedText": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "TopicQueryScope": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "All",
          "Explicit",
          "Implicit"
        ],
        "enum": [
          "All",
          "Explicit",
          "Implicit"
        ]
      },
      "UpsertTopicsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "requests"
        ],
        "properties": {
          "requests": {
            "type": "array",
            "description": "The topics to update.",
            "items": {
              "$ref": "#/components/schemas/UpsertTopicDto"
            }
          }
        }
      },
      "UpsertTopicDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "path": {
            "type": "string",
            "description": "The path of the topic."
          },
          "name": {
            "description": "The name.",
            "nullable": true,
            "$ref": "#/components/schemas/LocalizedText"
          },
          "description": {
            "description": "The description.",
            "nullable": true,
            "$ref": "#/components/schemas/LocalizedText"
          },
          "showAutomatically": {
            "type": "boolean",
            "description": "True to show the topic automatically to new users, e.g. when he accepts push notifications.",
            "nullable": true
          },
          "channels": {
            "type": "object",
            "description": "Settings per channel.",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/TopicChannel"
            }
          }
        }
      },
      "ListResponseDtoOfTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/TemplateDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "TemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "code",
          "created",
          "lastUpdate",
          "formatting",
          "settings"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the template."
          },
          "created": {
            "type": "string",
            "description": "The date time (ISO 8601) when the template has been created.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The date time (ISO 8601) when the template has been updated.",
            "format": "date-time"
          },
          "formatting": {
            "description": "The formatting.",
            "$ref": "#/components/schemas/NotificationFormattingDto"
          },
          "settings": {
            "type": "object",
            "description": "Notification settings per channel.",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelSettingDto"
            }
          }
        }
      },
      "NotificationFormattingDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "subject"
        ],
        "properties": {
          "subject": {
            "description": "The required subject with one entry per language.",
            "$ref": "#/components/schemas/LocalizedText"
          },
          "body": {
            "description": "The optional body with one entry per language.",
            "nullable": true,
            "$ref": "#/components/schemas/LocalizedText"
          },
          "confirmLink": {
            "description": "The optional confirm link with one entry per language.",
            "nullable": true,
            "$ref": "#/components/schemas/LocalizedText"
          },
          "confirmText": {
            "description": "The optional confirm text with one entry per language.",
            "nullable": true,
            "$ref": "#/components/schemas/LocalizedText"
          },
          "imageSmall": {
            "description": "The optional small image with one entry per language.",
            "nullable": true,
            "$ref": "#/components/schemas/LocalizedText"
          },
          "imageLarge": {
            "description": "The optional large image with one entry per language.",
            "nullable": true,
            "$ref": "#/components/schemas/LocalizedText"
          },
          "linkUrl": {
            "description": "The optional link url with one entry per language.",
            "nullable": true,
            "$ref": "#/components/schemas/LocalizedText"
          },
          "linkText": {
            "description": "The optional link name with one entry per language.",
            "nullable": true,
            "$ref": "#/components/schemas/LocalizedText"
          },
          "confirmMode": {
            "description": "The confirmation mode.",
            "nullable": true,
            "$ref": "#/components/schemas/ConfirmMode"
          }
        }
      },
      "ConfirmMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Explicit"
        ],
        "enum": [
          "None",
          "Explicit"
        ]
      },
      "UpsertTemplatesDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "requests"
        ],
        "properties": {
          "requests": {
            "type": "array",
            "description": "The templates to update.",
            "items": {
              "$ref": "#/components/schemas/UpsertTemplateDto"
            }
          }
        }
      },
      "UpsertTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "code",
          "formatting"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of the template.",
            "minLength": 1
          },
          "formatting": {
            "description": "The formatting.",
            "$ref": "#/components/schemas/NotificationFormattingDto"
          },
          "settings": {
            "type": "object",
            "description": "Notification settings per channel.",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelSettingDto"
            }
          }
        }
      },
      "ListResponseDtoOfSystemUserDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/SystemUserDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "SystemUserDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "email",
          "isLocked",
          "roles",
          "canUpdate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the user."
          },
          "email": {
            "type": "string",
            "description": "The email of the user. Unique value."
          },
          "isLocked": {
            "type": "boolean",
            "description": "Determines if the user is locked."
          },
          "roles": {
            "type": "array",
            "description": "Additional role for the user.",
            "items": {
              "type": "string"
            }
          },
          "canUpdate": {
            "type": "boolean",
            "description": "True if the user can be updated."
          }
        }
      },
      "CreateSystemUserDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email",
          "roles"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user. Unique value.",
            "format": "email",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "description": "The password of the user.",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "description": "Additional role for the user.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateSystemUserDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user. Unique value.",
            "format": "email",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "description": "The password of the user.",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "description": "Additional role for the user.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InfoDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "version"
        ],
        "properties": {
          "version": {
            "type": "string",
            "description": "The actual version."
          }
        }
      },
      "ListResponseDtoOfUserNotificationDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/UserNotificationDetailsDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "UserNotificationDetailsDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserNotificationBaseDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "channels"
            ],
            "properties": {
              "channels": {
                "type": "object",
                "description": "The channel details.",
                "additionalProperties": {
                  "$ref": "#/components/schemas/UserNotificationChannelDto"
                }
              },
              "firstDelivered": {
                "description": "The information when the notifcation was marked as deliverd.",
                "nullable": true,
                "$ref": "#/components/schemas/HandledInfoDto"
              },
              "firstSeen": {
                "description": "The information when the notifcation was marked as seen.",
                "nullable": true,
                "$ref": "#/components/schemas/HandledInfoDto"
              },
              "firstConfirmed": {
                "description": "The information when the notifcation was marked as confirmed.",
                "nullable": true,
                "$ref": "#/components/schemas/HandledInfoDto"
              }
            }
          }
        ]
      },
      "UserNotificationChannelDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "setting",
          "status"
        ],
        "properties": {
          "setting": {
            "description": "The notification settings.",
            "$ref": "#/components/schemas/ChannelSettingDto"
          },
          "status": {
            "type": "object",
            "description": "The status per token or configuration.",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelSendInfoDto"
            }
          },
          "firstDelivered": {
            "type": "string",
            "description": "The first time the notification has been marked as delivered for this channel.",
            "format": "date-time",
            "nullable": true
          },
          "firstSeen": {
            "type": "string",
            "description": "The first time the notification has been marked as seen for this channel.",
            "format": "date-time",
            "nullable": true
          },
          "firstConfirmed": {
            "type": "string",
            "description": "The first time the notification has been marked as confirmed for this channel.",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "ChannelSendInfoDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "status",
          "configuration",
          "lastUpdate"
        ],
        "properties": {
          "status": {
            "description": "The send status.",
            "$ref": "#/components/schemas/DeliveryStatus"
          },
          "configuration": {
            "description": "The configuration for the device.",
            "$ref": "#/components/schemas/SendConfiguration"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The last update.",
            "format": "date-time"
          },
          "detail": {
            "type": "string",
            "description": "The details.",
            "nullable": true
          },
          "firstDelivered": {
            "type": "string",
            "description": "The first time the notification has been marked as delivered for this identifier.",
            "format": "date-time",
            "nullable": true
          },
          "firstSeen": {
            "type": "string",
            "description": "The first time the notification has been marked as seen for this identifier.",
            "format": "date-time",
            "nullable": true
          },
          "firstConfirmed": {
            "type": "string",
            "description": "The first time the notification has been marked as confirmed for this identifier.",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "DeliveryStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Skipped",
          "Attempt",
          "Failed",
          "Sent",
          "Handled"
        ],
        "enum": [
          "Unknown",
          "Skipped",
          "Attempt",
          "Failed",
          "Sent",
          "Handled"
        ]
      },
      "SendConfiguration": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "HandledInfoDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "timestamp"
        ],
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp.",
            "format": "date-time"
          },
          "channel": {
            "type": "string",
            "description": "The channel over which the notification was marked as seen or confirmed.",
            "nullable": true
          }
        }
      },
      "UserNotificationBaseDto": {
        "type": "object",
        "x-abstract": true,
        "additionalProperties": false,
        "required": [
          "id",
          "subject",
          "silent",
          "created",
          "updated"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the notification.",
            "format": "guid"
          },
          "subject": {
            "type": "string",
            "description": "The subject of the notification in the language of the user."
          },
          "silent": {
            "type": "boolean",
            "description": "True when the notification is silent."
          },
          "created": {
            "type": "string",
            "description": "The timestamp when the notification has been created.",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "description": "The timestamp when the notification has been updated.",
            "format": "date-time"
          },
          "trackingToken": {
            "type": "string",
            "description": "The tracking token.",
            "nullable": true
          },
          "body": {
            "type": "string",
            "description": "The optional body text.",
            "nullable": true
          },
          "imageSmall": {
            "type": "string",
            "description": "The optional link to the small image.",
            "nullable": true
          },
          "imageLarge": {
            "type": "string",
            "description": "The optional link to the large image.",
            "nullable": true
          },
          "trackSeenUrl": {
            "type": "string",
            "description": "The tracking url that needs to be invoked to mark the notification as seen.",
            "nullable": true
          },
          "trackDeliveredUrl": {
            "type": "string",
            "description": "The tracking url that needs to be invoked to mark the notification as delivered.",
            "nullable": true
          },
          "linkUrl": {
            "type": "string",
            "description": "An optional link.",
            "nullable": true
          },
          "linkText": {
            "type": "string",
            "description": "The link text.",
            "nullable": true
          },
          "confirmLink": {
            "type": "string",
            "description": "The link after the confirm button.",
            "nullable": true
          },
          "confirmText": {
            "type": "string",
            "description": "The text for the confirm button.",
            "nullable": true
          },
          "confirmUrl": {
            "type": "string",
            "description": "The tracking url that needs to be invoked to mark the notification as confirmed.",
            "nullable": true
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation ID, that can be used to query notifications.",
            "nullable": true
          },
          "data": {
            "type": "string",
            "description": "Optional data, usually a json object.",
            "nullable": true
          },
          "properties": {
            "description": "Optional properties.",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationProperties"
          }
        }
      },
      "ListResponseDtoOfUserNotificationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/UserNotificationDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "UserNotificationDto": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserNotificationBaseDto"
          },
          {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "isSeen",
              "isConfirmed"
            ],
            "properties": {
              "isSeen": {
                "type": "boolean",
                "description": "True when the notification has been seen at least once."
              },
              "isConfirmed": {
                "type": "boolean",
                "description": "True when the notification has been confirmed at least once."
              }
            }
          }
        ]
      },
      "DeviceNotificationsQueryScope": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Seen",
          "Unseen",
          "All"
        ],
        "enum": [
          "Seen",
          "Unseen",
          "All"
        ]
      },
      "TrackNotificationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "configurationId"
        ],
        "properties": {
          "confirmed": {
            "type": "string",
            "description": "The ID of the noitifications to mark as confirmed.",
            "nullable": true
          },
          "seen": {
            "type": "array",
            "description": "The ID of the noitifications to mark as seen.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "channel": {
            "type": "string",
            "description": "The channel name.",
            "nullable": true
          },
          "configurationId": {
            "type": "string",
            "description": "The configuration ID.",
            "format": "guid"
          },
          "deviceIdentifier": {
            "type": "string",
            "description": "The device identifier.",
            "nullable": true
          }
        }
      },
      "ListResponseDtoOfMobilePushTokenDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/MobilePushTokenDto2"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "MobilePushTokenDto2": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "token",
          "deviceType"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "The device token."
          },
          "deviceType": {
            "description": "The device type.",
            "$ref": "#/components/schemas/MobileDeviceType"
          },
          "deviceIdentifier": {
            "type": "string",
            "description": "A unique identifier for the device.",
            "nullable": true
          }
        }
      },
      "RegisterMobileTokenDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "description": "The device token."
          },
          "deviceType": {
            "description": "The device type.",
            "$ref": "#/components/schemas/MobileDeviceType"
          },
          "deviceIdentifier": {
            "type": "string",
            "description": "A unique identifier for the device.",
            "nullable": true
          }
        }
      },
      "ListResponseDtoOfMediaDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/MediaDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "MediaDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "mimeType",
          "fileName",
          "fileInfo",
          "url",
          "fileSize",
          "created",
          "lastUpdate",
          "type",
          "metadata"
        ],
        "properties": {
          "mimeType": {
            "type": "string",
            "description": "The mime type."
          },
          "fileName": {
            "type": "string",
            "description": "The file name."
          },
          "fileInfo": {
            "type": "string",
            "description": "Generated information about the file."
          },
          "url": {
            "type": "string",
            "description": "The url to the media item."
          },
          "fileSize": {
            "type": "integer",
            "description": "The size of the media file.",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "description": "The date time (ISO 8601) when the media has been created.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The date time (ISO 8601) when the media has been updated.",
            "format": "date-time"
          },
          "type": {
            "description": "The type of the media.",
            "$ref": "#/components/schemas/MediaType"
          },
          "metadata": {
            "description": "Metadata about the media.",
            "$ref": "#/components/schemas/MediaMetadata"
          }
        }
      },
      "MediaType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Unknown",
          "Image",
          "Audio",
          "Video"
        ],
        "enum": [
          "Unknown",
          "Image",
          "Audio",
          "Video"
        ]
      },
      "MediaMetadata": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "ResizeMode": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Crop",
          "CropUpsize",
          "Pad",
          "BoxPad",
          "Max",
          "Min",
          "Stretch"
        ],
        "enum": [
          "Crop",
          "CropUpsize",
          "Pad",
          "BoxPad",
          "Max",
          "Min",
          "Stretch"
        ]
      },
      "ListResponseDtoOfLogEntryDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/LogEntryDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "LogEntryDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "message",
          "system",
          "firstSeen",
          "lastSeen",
          "eventCode",
          "count"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "The log message."
          },
          "system": {
            "type": "string",
            "description": "The system."
          },
          "firstSeen": {
            "type": "string",
            "description": "The first time this message has been seen.",
            "format": "date-time"
          },
          "lastSeen": {
            "type": "string",
            "description": "The last time this message has been seen.",
            "format": "date-time"
          },
          "eventCode": {
            "type": "integer",
            "description": "The event code.",
            "format": "int64"
          },
          "count": {
            "type": "integer",
            "description": "The number of items the message has been seen.",
            "format": "int64"
          }
        }
      },
      "ListResponseDtoOfEventDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/EventDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "EventDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "topic",
          "displayName",
          "created",
          "formatting",
          "settings",
          "properties",
          "counters",
          "silent"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the event."
          },
          "topic": {
            "type": "string",
            "description": "The topic path."
          },
          "creatorId": {
            "type": "string",
            "description": "A custom id to identity the creator.",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The display name."
          },
          "data": {
            "type": "string",
            "description": "Additional user defined data.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "The time when the event has been created.",
            "format": "date-time"
          },
          "formatting": {
            "description": "The final formatting infos.",
            "$ref": "#/components/schemas/NotificationFormattingDto"
          },
          "settings": {
            "type": "object",
            "description": "Notification settings per channel.",
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelSettingDto"
            }
          },
          "properties": {
            "type": "object",
            "description": "User defined properties.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "scheduling": {
            "description": "The scheduling options.",
            "nullable": true,
            "$ref": "#/components/schemas/SchedulingDto"
          },
          "counters": {
            "type": "object",
            "description": "The statistics counters.",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "silent": {
            "type": "boolean",
            "description": "True when silent."
          },
          "timeToLiveInSeconds": {
            "type": "integer",
            "description": "The time to live in seconds.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "PublishManyDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "requests"
        ],
        "properties": {
          "requests": {
            "type": "array",
            "description": "The publish requests.",
            "items": {
              "$ref": "#/components/schemas/PublishDto"
            }
          }
        }
      },
      "PublishDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "topic"
        ],
        "properties": {
          "topic": {
            "type": "string",
            "description": "The topic path.",
            "minLength": 1
          },
          "id": {
            "type": "string",
            "description": "A custom ID.",
            "nullable": true
          },
          "creatorId": {
            "type": "string",
            "description": "A custom id to identity the creator.",
            "nullable": true
          },
          "templateCode": {
            "type": "string",
            "description": "The template code.",
            "nullable": true
          },
          "correlationId": {
            "type": "string",
            "description": "The correlation ID, that can be used to query notifications.",
            "nullable": true
          },
          "groupKey": {
            "type": "string",
            "description": "The grouping key to combine notifications.",
            "nullable": true
          },
          "templateVariants": {
            "type": "object",
            "description": "The template variants with propability.",
            "nullable": true,
            "additionalProperties": {
              "type": "number",
              "format": "double"
            }
          },
          "data": {
            "type": "string",
            "description": "Additional user defined data.",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "A custom timestamp.",
            "format": "date-time"
          },
          "preformatted": {
            "description": "Preformatting when no template is used.",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationFormattingDto"
          },
          "settings": {
            "type": "object",
            "description": "The notification settings.",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/ChannelSettingDto"
            }
          },
          "properties": {
            "description": "User defined properties.",
            "nullable": true,
            "$ref": "#/components/schemas/NotificationProperties"
          },
          "scheduling": {
            "description": "The scheduling options.",
            "nullable": true,
            "$ref": "#/components/schemas/SchedulingDto"
          },
          "silent": {
            "type": "boolean",
            "description": "True when silent."
          },
          "test": {
            "type": "boolean",
            "description": "True when using test integrations."
          },
          "timeToLiveInSeconds": {
            "type": "integer",
            "description": "The time to live in seconds.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "CancelResponseDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "hasCancelled"
        ],
        "properties": {
          "hasCancelled": {
            "type": "boolean",
            "description": "True if something has been cancelled."
          }
        }
      },
      "CancelEventDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "userId",
          "eventId"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "The user ID for which the event was created.",
            "minLength": 1
          },
          "eventId": {
            "type": "string",
            "description": "The event ID.",
            "minLength": 1
          },
          "groupKey": {
            "type": "string",
            "description": "The grouping key to combine notifications.",
            "nullable": true
          },
          "test": {
            "type": "boolean",
            "description": "True when using test integrations."
          }
        }
      },
      "MjmlSchema": {
        "type": "object",
        "additionalProperties": {},
        "required": [
          "!top"
        ],
        "properties": {
          "!top": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "EmailPreviewDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "result": {
            "type": "string",
            "description": "The rendered preview.",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "description": "The errors when rendering a preview.",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EmailPreviewErrorDto"
            }
          }
        }
      },
      "EmailPreviewErrorDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "message",
          "lineNumber",
          "linePosition"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "The error message."
          },
          "lineNumber": {
            "type": "integer",
            "description": "The line number.",
            "format": "int32"
          },
          "linePosition": {
            "type": "integer",
            "description": "The line column.",
            "format": "int32"
          }
        }
      },
      "EmailPreviewRequestDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "template"
        ],
        "properties": {
          "template": {
            "type": "string",
            "description": "The preview to render.",
            "minLength": 1
          },
          "type": {
            "description": "The template type.",
            "$ref": "#/components/schemas/EmailPreviewType"
          }
        }
      },
      "EmailPreviewType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Html",
          "Text"
        ],
        "enum": [
          "Html",
          "Text"
        ]
      },
      "ListResponseDtoOfChannelTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/ChannelTemplateDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "ChannelTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "primary",
          "lastUpdate"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the template."
          },
          "name": {
            "type": "string",
            "description": "The optional name of the template.",
            "nullable": true
          },
          "primary": {
            "type": "boolean",
            "description": "True, when the template is the primary template."
          },
          "lastUpdate": {
            "type": "string",
            "description": "The last time the template has been updated.",
            "format": "date-time"
          }
        }
      },
      "ListResponseDtoOfTemplatePropertyDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "items",
          "total"
        ],
        "properties": {
          "items": {
            "type": "array",
            "description": "The items.",
            "items": {
              "$ref": "#/components/schemas/TemplatePropertyDto"
            }
          },
          "total": {
            "type": "integer",
            "description": "The total number of items.",
            "format": "int64"
          }
        }
      },
      "TemplatePropertyDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "path",
          "type"
        ],
        "properties": {
          "path": {
            "type": "string",
            "description": "The property path."
          },
          "type": {
            "description": "The data ty.",
            "$ref": "#/components/schemas/LiquidPropertyType"
          },
          "description": {
            "type": "string",
            "description": "The optional description.",
            "nullable": true
          }
        }
      },
      "LiquidPropertyType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Array",
          "String",
          "Number",
          "Boolean",
          "Object"
        ],
        "enum": [
          "Array",
          "String",
          "Number",
          "Boolean",
          "Object"
        ]
      },
      "ChannelTemplateDetailsDtoOfEmailTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "primary",
          "created",
          "lastUpdate",
          "languages"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the template."
          },
          "name": {
            "type": "string",
            "description": "The optional name of the template.",
            "nullable": true
          },
          "primary": {
            "type": "boolean",
            "description": "True, when the template is the primary template."
          },
          "created": {
            "type": "string",
            "description": "The date time (ISO 8601) when the template has been created.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The date time (ISO 8601) when the template has been updated.",
            "format": "date-time"
          },
          "languages": {
            "type": "object",
            "description": "The language specific templates.",
            "additionalProperties": {
              "$ref": "#/components/schemas/EmailTemplateDto"
            }
          }
        }
      },
      "EmailTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "subject",
          "bodyHtml"
        ],
        "properties": {
          "subject": {
            "type": "string",
            "description": "The subject text."
          },
          "bodyHtml": {
            "type": "string",
            "description": "The body html template."
          },
          "bodyText": {
            "type": "string",
            "description": "The body text template.",
            "nullable": true
          },
          "fromEmail": {
            "type": "string",
            "description": "The optional from email.",
            "nullable": true
          },
          "fromName": {
            "type": "string",
            "description": "The optional from name.",
            "nullable": true
          }
        }
      },
      "CreateChannelTemplateDto": {
        "type": "object",
        "additionalProperties": false
      },
      "CreateChannelTemplateLanguageDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "language"
        ],
        "properties": {
          "language": {
            "type": "string",
            "description": "The new language.",
            "minLength": 1
          }
        }
      },
      "UpdateChannelTemplateDtoOfEmailTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template.",
            "nullable": true
          },
          "primary": {
            "type": "boolean",
            "description": "True, when the template is the primary template.",
            "nullable": true
          },
          "languages": {
            "type": "object",
            "description": "The language specific templates.",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/EmailTemplateDto"
            }
          }
        }
      },
      "ChannelTemplateDetailsDtoOfMessagingTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "primary",
          "created",
          "lastUpdate",
          "languages"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the template."
          },
          "name": {
            "type": "string",
            "description": "The optional name of the template.",
            "nullable": true
          },
          "primary": {
            "type": "boolean",
            "description": "True, when the template is the primary template."
          },
          "created": {
            "type": "string",
            "description": "The date time (ISO 8601) when the template has been created.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The date time (ISO 8601) when the template has been updated.",
            "format": "date-time"
          },
          "languages": {
            "type": "object",
            "description": "The language specific templates.",
            "additionalProperties": {
              "$ref": "#/components/schemas/MessagingTemplateDto"
            }
          }
        }
      },
      "MessagingTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "description": "The template text."
          }
        }
      },
      "UpdateChannelTemplateDtoOfMessagingTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template.",
            "nullable": true
          },
          "primary": {
            "type": "boolean",
            "description": "True, when the template is the primary template.",
            "nullable": true
          },
          "languages": {
            "type": "object",
            "description": "The language specific templates.",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/MessagingTemplateDto"
            }
          }
        }
      },
      "ChannelTemplateDetailsDtoOfSmsTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "primary",
          "created",
          "lastUpdate",
          "languages"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the template."
          },
          "name": {
            "type": "string",
            "description": "The optional name of the template.",
            "nullable": true
          },
          "primary": {
            "type": "boolean",
            "description": "True, when the template is the primary template."
          },
          "created": {
            "type": "string",
            "description": "The date time (ISO 8601) when the template has been created.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The date time (ISO 8601) when the template has been updated.",
            "format": "date-time"
          },
          "languages": {
            "type": "object",
            "description": "The language specific templates.",
            "additionalProperties": {
              "$ref": "#/components/schemas/SmsTemplateDto"
            }
          }
        }
      },
      "SmsTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "description": "The template text."
          }
        }
      },
      "UpdateChannelTemplateDtoOfSmsTemplateDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the template.",
            "nullable": true
          },
          "primary": {
            "type": "boolean",
            "description": "True, when the template is the primary template.",
            "nullable": true
          },
          "languages": {
            "type": "object",
            "description": "The language specific templates.",
            "nullable": true,
            "additionalProperties": {
              "$ref": "#/components/schemas/SmsTemplateDto"
            }
          }
        }
      },
      "AppDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "role",
          "created",
          "lastUpdate",
          "languages",
          "apiKeys",
          "counters"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the app."
          },
          "name": {
            "type": "string",
            "description": "The app name."
          },
          "role": {
            "type": "string",
            "description": "The current role."
          },
          "created": {
            "type": "string",
            "description": "The date time (ISO 8601) when the app has been created.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The date time (ISO 8601) when the app has been updated.",
            "format": "date-time"
          },
          "languages": {
            "type": "array",
            "description": "The supported languages.",
            "items": {
              "type": "string"
            }
          },
          "apiKeys": {
            "type": "object",
            "description": "The api keys.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "counters": {
            "type": "object",
            "description": "The statistics counters.",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "AppDetailsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "name",
          "role",
          "created",
          "lastUpdate",
          "languages",
          "apiKeys",
          "contributors",
          "counters"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the app."
          },
          "name": {
            "type": "string",
            "description": "The app name."
          },
          "role": {
            "type": "string",
            "description": "The current role."
          },
          "created": {
            "type": "string",
            "description": "The date time (ISO 8601) when the app has been created.",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "description": "The date time (ISO 8601) when the app has been updated.",
            "format": "date-time"
          },
          "confirmUrl": {
            "type": "string",
            "description": "The confirm URL.",
            "nullable": true
          },
          "languages": {
            "type": "array",
            "description": "The supported languages.",
            "items": {
              "type": "string"
            }
          },
          "apiKeys": {
            "type": "object",
            "description": "The api keys.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "contributors": {
            "type": "array",
            "description": "The contributors.",
            "items": {
              "$ref": "#/components/schemas/AppContributorDto"
            }
          },
          "counters": {
            "type": "object",
            "description": "The statistics counters.",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "AppContributorDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "userId",
          "userName",
          "role"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "The ID of the user."
          },
          "userName": {
            "type": "string",
            "description": "The name of the user."
          },
          "role": {
            "type": "string",
            "description": "The role."
          }
        }
      },
      "AuthSchemeValueDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "scheme": {
            "description": "The auth scheme if configured.",
            "nullable": true,
            "$ref": "#/components/schemas/AuthSchemeDto"
          }
        }
      },
      "AuthSchemeDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "domain",
          "displayName",
          "clientId",
          "clientSecret",
          "authority"
        ],
        "properties": {
          "domain": {
            "type": "string",
            "description": "The domain name of your user accounts.",
            "minLength": 1
          },
          "displayName": {
            "type": "string",
            "description": "The display name for buttons.",
            "minLength": 1
          },
          "clientId": {
            "type": "string",
            "description": "The client ID.",
            "minLength": 1
          },
          "clientSecret": {
            "type": "string",
            "description": "The client secret.",
            "minLength": 1
          },
          "authority": {
            "type": "string",
            "description": "The authority URL.",
            "minLength": 1
          },
          "signoutRedirectUrl": {
            "type": "string",
            "description": "The URL to redirect after a signout.",
            "nullable": true
          }
        }
      },
      "UpsertAppDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string",
            "description": "The app name.",
            "nullable": true
          },
          "languages": {
            "type": "array",
            "description": "The supported languages.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "emailAddress": {
            "type": "string",
            "description": "The sender email address.",
            "nullable": true
          },
          "emailName": {
            "type": "string",
            "description": "The sender email name.",
            "nullable": true
          },
          "firebaseProject": {
            "type": "string",
            "description": "The firebase project ID.",
            "nullable": true
          },
          "firebaseCredential": {
            "type": "string",
            "description": "The firebase credentials.",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string",
            "description": "The webhook URL.",
            "nullable": true
          },
          "confirmUrl": {
            "type": "string",
            "description": "The confirm URL.",
            "nullable": true
          },
          "allowEmail": {
            "type": "boolean",
            "description": "True, when emails are allowed.",
            "nullable": true
          },
          "allowSms": {
            "type": "boolean",
            "description": "True, when SMS are allowed.",
            "nullable": true
          }
        }
      },
      "AddContributorDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the new contributor.",
            "minLength": 1
          },
          "role": {
            "type": "string",
            "description": "The role.",
            "nullable": true
          }
        }
      },
      "ConfiguredIntegrationsDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "configured",
          "supported"
        ],
        "properties": {
          "configured": {
            "type": "object",
            "description": "The configured integrations.",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConfiguredIntegrationDto"
            }
          },
          "supported": {
            "type": "object",
            "description": "The supported integrations.",
            "additionalProperties": {
              "$ref": "#/components/schemas/IntegrationDefinitionDto"
            }
          }
        }
      },
      "ConfiguredIntegrationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "properties",
          "enabled",
          "priority",
          "status"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The integration type."
          },
          "properties": {
            "type": "object",
            "description": "The configured properties.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "True when enabled."
          },
          "test": {
            "type": "boolean",
            "description": "True or false when only used for test or production mode.",
            "nullable": true
          },
          "condition": {
            "type": "string",
            "description": "The javascript condition.",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "description": "The priority in which order the integrations must run.",
            "format": "int32"
          },
          "status": {
            "description": "The status of the integration.",
            "$ref": "#/components/schemas/IntegrationStatus"
          }
        }
      },
      "IntegrationStatus": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Verified",
          "VerificationFailed",
          "Pending",
          "Removed"
        ],
        "enum": [
          "Verified",
          "VerificationFailed",
          "Pending",
          "Removed"
        ]
      },
      "IntegrationDefinitionDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "title",
          "logo",
          "properties",
          "capabilities"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the integration.",
            "minLength": 1
          },
          "logo": {
            "type": "string",
            "description": "The logo for the integration."
          },
          "description": {
            "type": "string",
            "description": "The optional description of the integration.",
            "nullable": true
          },
          "properties": {
            "type": "array",
            "description": "The properties to configure.",
            "items": {
              "$ref": "#/components/schemas/IntegrationPropertyDto"
            }
          },
          "capabilities": {
            "type": "array",
            "description": "The features of the integration.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IntegrationPropertyDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "name",
          "type",
          "summary",
          "isRequired",
          "format"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The field name for the property."
          },
          "type": {
            "description": "The editor type.",
            "$ref": "#/components/schemas/PropertyType"
          },
          "editorDescription": {
            "type": "string",
            "description": "The optional description.",
            "nullable": true
          },
          "editorLabel": {
            "type": "string",
            "description": "The optional label.",
            "nullable": true
          },
          "summary": {
            "type": "boolean",
            "description": "True to show this property in the summary."
          },
          "allowedValues": {
            "type": "array",
            "description": "The allowed values.",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "isRequired": {
            "type": "boolean",
            "description": "True when required."
          },
          "minValue": {
            "type": "integer",
            "description": "The min value (for numbers).",
            "format": "int64",
            "nullable": true
          },
          "maxValue": {
            "type": "integer",
            "description": "The max value (for numbers).",
            "format": "int64",
            "nullable": true
          },
          "minLength": {
            "type": "integer",
            "description": "The min length (for strings).",
            "format": "int64",
            "nullable": true
          },
          "maxLength": {
            "type": "integer",
            "description": "The min length (for strings).",
            "format": "int64",
            "nullable": true
          },
          "pattern": {
            "type": "string",
            "description": "The pattern (for strings).",
            "nullable": true
          },
          "format": {
            "description": "Format of the field, used to both validate the input and to provide hints to the user.",
            "$ref": "#/components/schemas/PropertyFormat"
          },
          "defaultValue": {
            "description": "The default value.",
            "nullable": true
          }
        }
      },
      "PropertyType": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "Text",
          "Number",
          "MultilineText",
          "Password",
          "Boolean"
        ],
        "enum": [
          "Text",
          "Number",
          "MultilineText",
          "Password",
          "Boolean"
        ]
      },
      "PropertyFormat": {
        "type": "string",
        "description": "",
        "x-enumNames": [
          "None",
          "Email",
          "HttpUrl"
        ],
        "enum": [
          "None",
          "Email",
          "HttpUrl"
        ]
      },
      "IntegrationCreatedDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "id",
          "integration"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the integration."
          },
          "integration": {
            "description": "The integration.",
            "$ref": "#/components/schemas/ConfiguredIntegrationDto"
          }
        }
      },
      "CreateIntegrationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "type",
          "properties"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "The integration type.",
            "minLength": 1
          },
          "properties": {
            "type": "object",
            "description": "The configured properties.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "True when enabled.",
            "nullable": true
          },
          "test": {
            "type": "boolean",
            "description": "True when used for test events.",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "description": "The priority in which order the integrations must run.",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "UpdateIntegrationDto": {
        "type": "object",
        "additionalProperties": false,
        "required": [
          "properties"
        ],
        "properties": {
          "properties": {
            "type": "object",
            "description": "The configured properties.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "enabled": {
            "type": "boolean",
            "description": "True when enabled.",
            "nullable": true
          },
          "test": {
            "type": "boolean",
            "description": "True when used for test events.",
            "nullable": true
          },
          "condition": {
            "type": "string",
            "description": "The javascript condition.",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "description": "The priority in which order the integrations must run.",
            "format": "int32",
            "nullable": true
          }
        }
      }
    }
  }
}