/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * 
 * @export
 * @interface UserNotificationDto
 */
export interface UserNotificationDto {
    /**
     * The ID of the notification.
     * @type {string}
     * @memberof UserNotificationDto
     */
    id: string;
    /**
     * The subject of the notification in the language of the user.
     * @type {string}
     * @memberof UserNotificationDto
     */
    subject: string;
    /**
     * True when the notification is silent.
     * @type {boolean}
     * @memberof UserNotificationDto
     */
    silent: boolean;
    /**
     * The timestamp when the notification has been created.
     * @type {Date}
     * @memberof UserNotificationDto
     */
    created: Date;
    /**
     * The timestamp when the notification has been updated.
     * @type {Date}
     * @memberof UserNotificationDto
     */
    updated: Date;
    /**
     * The tracking token.
     * @type {string}
     * @memberof UserNotificationDto
     */
    trackingToken?: string | null;
    /**
     * The optional body text.
     * @type {string}
     * @memberof UserNotificationDto
     */
    body?: string | null;
    /**
     * The optional link to the small image.
     * @type {string}
     * @memberof UserNotificationDto
     */
    imageSmall?: string | null;
    /**
     * The optional link to the large image.
     * @type {string}
     * @memberof UserNotificationDto
     */
    imageLarge?: string | null;
    /**
     * The tracking url that needs to be invoked to mark the notification as seen.
     * @type {string}
     * @memberof UserNotificationDto
     */
    trackSeenUrl?: string | null;
    /**
     * The tracking url that needs to be invoked to mark the notification as delivered.
     * @type {string}
     * @memberof UserNotificationDto
     */
    trackDeliveredUrl?: string | null;
    /**
     * An optional link.
     * @type {string}
     * @memberof UserNotificationDto
     */
    linkUrl?: string | null;
    /**
     * The link text.
     * @type {string}
     * @memberof UserNotificationDto
     */
    linkText?: string | null;
    /**
     * The link after the confirm button.
     * @type {string}
     * @memberof UserNotificationDto
     */
    confirmLink?: string | null;
    /**
     * The text for the confirm button.
     * @type {string}
     * @memberof UserNotificationDto
     */
    confirmText?: string | null;
    /**
     * The tracking url that needs to be invoked to mark the notification as confirmed.
     * @type {string}
     * @memberof UserNotificationDto
     */
    confirmUrl?: string | null;
    /**
     * The correlation ID, that can be used to query notifications.
     * @type {string}
     * @memberof UserNotificationDto
     */
    correlationId?: string | null;
    /**
     * Optional data, usually a json object.
     * @type {string}
     * @memberof UserNotificationDto
     */
    data?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof UserNotificationDto
     */
    properties?: { [key: string]: string; };
    /**
     * True when the notification has been seen at least once.
     * @type {boolean}
     * @memberof UserNotificationDto
     */
    isSeen: boolean;
    /**
     * True when the notification has been confirmed at least once.
     * @type {boolean}
     * @memberof UserNotificationDto
     */
    isConfirmed: boolean;
}

/**
 * Check if a given object implements the UserNotificationDto interface.
 */
export function instanceOfUserNotificationDto(value: any): value is UserNotificationDto {
    if (!value) {
        return false;
    }
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('subject' in value) || value['subject'] === undefined) return false;
    if (!('silent' in value) || value['silent'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('updated' in value) || value['updated'] === undefined) return false;
    if (!('isSeen' in value) || value['isSeen'] === undefined) return false;
    if (!('isConfirmed' in value) || value['isConfirmed'] === undefined) return false;
    return true;
}

export function UserNotificationDtoFromJSON(json: any): UserNotificationDto {
    return UserNotificationDtoFromJSONTyped(json, false);
}

export function UserNotificationDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): UserNotificationDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'subject': json['subject'],
        'silent': json['silent'],
        'created': (new Date(json['created'])),
        'updated': (new Date(json['updated'])),
        'trackingToken': json['trackingToken'] == null ? undefined : json['trackingToken'],
        'body': json['body'] == null ? undefined : json['body'],
        'imageSmall': json['imageSmall'] == null ? undefined : json['imageSmall'],
        'imageLarge': json['imageLarge'] == null ? undefined : json['imageLarge'],
        'trackSeenUrl': json['trackSeenUrl'] == null ? undefined : json['trackSeenUrl'],
        'trackDeliveredUrl': json['trackDeliveredUrl'] == null ? undefined : json['trackDeliveredUrl'],
        'linkUrl': json['linkUrl'] == null ? undefined : json['linkUrl'],
        'linkText': json['linkText'] == null ? undefined : json['linkText'],
        'confirmLink': json['confirmLink'] == null ? undefined : json['confirmLink'],
        'confirmText': json['confirmText'] == null ? undefined : json['confirmText'],
        'confirmUrl': json['confirmUrl'] == null ? undefined : json['confirmUrl'],
        'correlationId': json['correlationId'] == null ? undefined : json['correlationId'],
        'data': json['data'] == null ? undefined : json['data'],
        'properties': json['properties'] == null ? undefined : json['properties'],
        'isSeen': json['isSeen'],
        'isConfirmed': json['isConfirmed'],
    };
}

export function UserNotificationDtoToJSON(value?: UserNotificationDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'subject': value['subject'],
        'silent': value['silent'],
        'created': ((value['created']).toISOString()),
        'updated': ((value['updated']).toISOString()),
        'trackingToken': value['trackingToken'],
        'body': value['body'],
        'imageSmall': value['imageSmall'],
        'imageLarge': value['imageLarge'],
        'trackSeenUrl': value['trackSeenUrl'],
        'trackDeliveredUrl': value['trackDeliveredUrl'],
        'linkUrl': value['linkUrl'],
        'linkText': value['linkText'],
        'confirmLink': value['confirmLink'],
        'confirmText': value['confirmText'],
        'confirmUrl': value['confirmUrl'],
        'correlationId': value['correlationId'],
        'data': value['data'],
        'properties': value['properties'],
        'isSeen': value['isSeen'],
        'isConfirmed': value['isConfirmed'],
    };
}