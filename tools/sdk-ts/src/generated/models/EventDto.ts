/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NotificationFormattingDto } from './NotificationFormattingDto';
import {
    NotificationFormattingDtoFromJSON,
    NotificationFormattingDtoToJSON,
} from './NotificationFormattingDto';
import type { ChannelSettingDto } from './ChannelSettingDto';
import {
    ChannelSettingDtoFromJSON,
    ChannelSettingDtoToJSON,
} from './ChannelSettingDto';
import type { SchedulingDto } from './SchedulingDto';
import {
    SchedulingDtoFromJSON,
    SchedulingDtoToJSON,
} from './SchedulingDto';

/**
 * 
 * @export
 * @interface EventDto
 */
export interface EventDto {
    /**
     * The ID of the event.
     * @type {string}
     * @memberof EventDto
     */
    id: string;
    /**
     * The topic path.
     * @type {string}
     * @memberof EventDto
     */
    topic: string;
    /**
     * A custom id to identity the creator.
     * @type {string}
     * @memberof EventDto
     */
    creatorId?: string | null;
    /**
     * The display name.
     * @type {string}
     * @memberof EventDto
     */
    displayName: string;
    /**
     * Additional user defined data.
     * @type {string}
     * @memberof EventDto
     */
    data?: string | null;
    /**
     * The time when the event has been created.
     * @type {Date}
     * @memberof EventDto
     */
    created: Date;
    /**
     * 
     * @type {NotificationFormattingDto}
     * @memberof EventDto
     */
    formatting: NotificationFormattingDto;
    /**
     * Notification settings per channel.
     * @type {{ [key: string]: ChannelSettingDto; }}
     * @memberof EventDto
     */
    settings: { [key: string]: ChannelSettingDto; };
    /**
     * User defined properties.
     * @type {{ [key: string]: string; }}
     * @memberof EventDto
     */
    properties: { [key: string]: string; };
    /**
     * 
     * @type {SchedulingDto}
     * @memberof EventDto
     */
    scheduling?: SchedulingDto;
    /**
     * The statistics counters.
     * @type {{ [key: string]: number; }}
     * @memberof EventDto
     */
    counters: { [key: string]: number; };
    /**
     * True when silent.
     * @type {boolean}
     * @memberof EventDto
     */
    silent: boolean;
    /**
     * The time to live in seconds.
     * @type {number}
     * @memberof EventDto
     */
    timeToLiveInSeconds?: number | null;
}

/**
 * Check if a given object implements the EventDto interface.
 */
export function instanceOfEventDto(value: any): value is EventDto {
    if (!value) {
        return false;
    }
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('topic' in value) || value['topic'] === undefined) return false;
    if (!('displayName' in value) || value['displayName'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('formatting' in value) || value['formatting'] === undefined) return false;
    if (!('settings' in value) || value['settings'] === undefined) return false;
    if (!('properties' in value) || value['properties'] === undefined) return false;
    if (!('counters' in value) || value['counters'] === undefined) return false;
    if (!('silent' in value) || value['silent'] === undefined) return false;
    return true;
}

export function EventDtoFromJSON(json: any): EventDto {
    return EventDtoFromJSONTyped(json, false);
}

export function EventDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): EventDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'topic': json['topic'],
        'creatorId': json['creatorId'] == null ? undefined : json['creatorId'],
        'displayName': json['displayName'],
        'data': json['data'] == null ? undefined : json['data'],
        'created': (new Date(json['created'])),
        'formatting': NotificationFormattingDtoFromJSON(json['formatting']),
        'settings': (mapValues(json['settings'], ChannelSettingDtoFromJSON)),
        'properties': json['properties'],
        'scheduling': json['scheduling'] == null ? undefined : SchedulingDtoFromJSON(json['scheduling']),
        'counters': json['counters'],
        'silent': json['silent'],
        'timeToLiveInSeconds': json['timeToLiveInSeconds'] == null ? undefined : json['timeToLiveInSeconds'],
    };
}

export function EventDtoToJSON(value?: EventDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'topic': value['topic'],
        'creatorId': value['creatorId'],
        'displayName': value['displayName'],
        'data': value['data'],
        'created': ((value['created']).toISOString()),
        'formatting': NotificationFormattingDtoToJSON(value['formatting']),
        'settings': (mapValues(value['settings'], x => ChannelSettingDtoToJSON(x))),
        'properties': value['properties'],
        'scheduling': SchedulingDtoToJSON(value['scheduling']),
        'counters': value['counters'],
        'silent': value['silent'],
        'timeToLiveInSeconds': value['timeToLiveInSeconds'],
    };
}