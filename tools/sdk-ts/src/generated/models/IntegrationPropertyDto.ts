/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { PropertyFormat } from './PropertyFormat';
import {
    PropertyFormatFromJSON,
    PropertyFormatToJSON,
} from './PropertyFormat';
import type { PropertyType } from './PropertyType';
import {
    PropertyTypeFromJSON,
    PropertyTypeToJSON,
} from './PropertyType';

/**
 * 
 * @export
 * @interface IntegrationPropertyDto
 */
export interface IntegrationPropertyDto {
    /**
     * The field name for the property.
     * @type {string}
     * @memberof IntegrationPropertyDto
     */
    name: string;
    /**
     * 
     * @type {PropertyType}
     * @memberof IntegrationPropertyDto
     */
    type: PropertyType;
    /**
     * The optional description.
     * @type {string}
     * @memberof IntegrationPropertyDto
     */
    editorDescription?: string | null;
    /**
     * The optional label.
     * @type {string}
     * @memberof IntegrationPropertyDto
     */
    editorLabel?: string | null;
    /**
     * True to show this property in the summary.
     * @type {boolean}
     * @memberof IntegrationPropertyDto
     */
    summary: boolean;
    /**
     * The allowed values.
     * @type {Array<string>}
     * @memberof IntegrationPropertyDto
     */
    allowedValues?: Array<string> | null;
    /**
     * True when required.
     * @type {boolean}
     * @memberof IntegrationPropertyDto
     */
    isRequired: boolean;
    /**
     * The min value (for numbers).
     * @type {number}
     * @memberof IntegrationPropertyDto
     */
    minValue?: number | null;
    /**
     * The max value (for numbers).
     * @type {number}
     * @memberof IntegrationPropertyDto
     */
    maxValue?: number | null;
    /**
     * The min length (for strings).
     * @type {number}
     * @memberof IntegrationPropertyDto
     */
    minLength?: number | null;
    /**
     * The min length (for strings).
     * @type {number}
     * @memberof IntegrationPropertyDto
     */
    maxLength?: number | null;
    /**
     * The pattern (for strings).
     * @type {string}
     * @memberof IntegrationPropertyDto
     */
    pattern?: string | null;
    /**
     * 
     * @type {PropertyFormat}
     * @memberof IntegrationPropertyDto
     */
    format: PropertyFormat;
    /**
     * The default value.
     * @type {any}
     * @memberof IntegrationPropertyDto
     */
    defaultValue?: any | null;
}



/**
 * Check if a given object implements the IntegrationPropertyDto interface.
 */
export function instanceOfIntegrationPropertyDto(value: any): value is IntegrationPropertyDto {
    if (!value) {
        return false;
    }
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('summary' in value) || value['summary'] === undefined) return false;
    if (!('isRequired' in value) || value['isRequired'] === undefined) return false;
    if (!('format' in value) || value['format'] === undefined) return false;
    return true;
}

export function IntegrationPropertyDtoFromJSON(json: any): IntegrationPropertyDto {
    return IntegrationPropertyDtoFromJSONTyped(json, false);
}

export function IntegrationPropertyDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): IntegrationPropertyDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': PropertyTypeFromJSON(json['type']),
        'editorDescription': json['editorDescription'] == null ? undefined : json['editorDescription'],
        'editorLabel': json['editorLabel'] == null ? undefined : json['editorLabel'],
        'summary': json['summary'],
        'allowedValues': json['allowedValues'] == null ? undefined : json['allowedValues'],
        'isRequired': json['isRequired'],
        'minValue': json['minValue'] == null ? undefined : json['minValue'],
        'maxValue': json['maxValue'] == null ? undefined : json['maxValue'],
        'minLength': json['minLength'] == null ? undefined : json['minLength'],
        'maxLength': json['maxLength'] == null ? undefined : json['maxLength'],
        'pattern': json['pattern'] == null ? undefined : json['pattern'],
        'format': PropertyFormatFromJSON(json['format']),
        'defaultValue': json['defaultValue'] == null ? undefined : json['defaultValue'],
    };
}

export function IntegrationPropertyDtoToJSON(value?: IntegrationPropertyDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'type': PropertyTypeToJSON(value['type']),
        'editorDescription': value['editorDescription'],
        'editorLabel': value['editorLabel'],
        'summary': value['summary'],
        'allowedValues': value['allowedValues'],
        'isRequired': value['isRequired'],
        'minValue': value['minValue'],
        'maxValue': value['maxValue'],
        'minLength': value['minLength'],
        'maxLength': value['maxLength'],
        'pattern': value['pattern'],
        'format': PropertyFormatToJSON(value['format']),
        'defaultValue': value['defaultValue'],
    };
}