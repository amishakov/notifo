/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TopicChannel } from './TopicChannel';
import {
    TopicChannelFromJSON,
    TopicChannelToJSON,
} from './TopicChannel';

/**
 * 
 * @export
 * @interface TopicDto
 */
export interface TopicDto {
    /**
     * The topic path.
     * @type {string}
     * @memberof TopicDto
     */
    path: string;
    /**
     * The date time (ISO 8601) when the topic has been created.
     * @type {Date}
     * @memberof TopicDto
     */
    created: Date;
    /**
     * The date time (ISO 8601) when the topic has been updated.
     * @type {Date}
     * @memberof TopicDto
     */
    lastUpdate: Date;
    /**
     * True when the topic is explicit.
     * @type {boolean}
     * @memberof TopicDto
     */
    isExplicit: boolean;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TopicDto
     */
    name?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TopicDto
     */
    description?: { [key: string]: string; };
    /**
     * True to show the topic automatically to new users, e.g. when he accepts push notifications.
     * @type {boolean}
     * @memberof TopicDto
     */
    showAutomatically: boolean;
    /**
     * The channel settings.
     * @type {{ [key: string]: TopicChannel; }}
     * @memberof TopicDto
     */
    channels?: { [key: string]: TopicChannel; } | null;
    /**
     * The statistics counters.
     * @type {{ [key: string]: number; }}
     * @memberof TopicDto
     */
    counters: { [key: string]: number; };
}

/**
 * Check if a given object implements the TopicDto interface.
 */
export function instanceOfTopicDto(value: any): value is TopicDto {
    if (!value) {
        return false;
    }
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('lastUpdate' in value) || value['lastUpdate'] === undefined) return false;
    if (!('isExplicit' in value) || value['isExplicit'] === undefined) return false;
    if (!('showAutomatically' in value) || value['showAutomatically'] === undefined) return false;
    if (!('counters' in value) || value['counters'] === undefined) return false;
    return true;
}

export function TopicDtoFromJSON(json: any): TopicDto {
    return TopicDtoFromJSONTyped(json, false);
}

export function TopicDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): TopicDto {
    if (json == null) {
        return json;
    }
    return {
        
        'path': json['path'],
        'created': (new Date(json['created'])),
        'lastUpdate': (new Date(json['lastUpdate'])),
        'isExplicit': json['isExplicit'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'showAutomatically': json['showAutomatically'],
        'channels': json['channels'] == null ? undefined : (mapValues(json['channels'], TopicChannelFromJSON)),
        'counters': json['counters'],
    };
}

export function TopicDtoToJSON(value?: TopicDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'path': value['path'],
        'created': ((value['created']).toISOString()),
        'lastUpdate': ((value['lastUpdate']).toISOString()),
        'isExplicit': value['isExplicit'],
        'name': value['name'],
        'description': value['description'],
        'showAutomatically': value['showAutomatically'],
        'channels': value['channels'] == null ? undefined : (mapValues(value['channels'], x => TopicChannelToJSON(x))),
        'counters': value['counters'],
    };
}