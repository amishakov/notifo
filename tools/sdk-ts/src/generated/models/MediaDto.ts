/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { MediaType } from './MediaType';
import {
    MediaTypeFromJSON,
    MediaTypeToJSON,
} from './MediaType';

/**
 * 
 * @export
 * @interface MediaDto
 */
export interface MediaDto {
    /**
     * The mime type.
     * @type {string}
     * @memberof MediaDto
     */
    mimeType: string;
    /**
     * The file name.
     * @type {string}
     * @memberof MediaDto
     */
    fileName: string;
    /**
     * Generated information about the file.
     * @type {string}
     * @memberof MediaDto
     */
    fileInfo: string;
    /**
     * The url to the media item.
     * @type {string}
     * @memberof MediaDto
     */
    url: string;
    /**
     * The size of the media file.
     * @type {number}
     * @memberof MediaDto
     */
    fileSize: number;
    /**
     * The date time (ISO 8601) when the media has been created.
     * @type {Date}
     * @memberof MediaDto
     */
    created: Date;
    /**
     * The date time (ISO 8601) when the media has been updated.
     * @type {Date}
     * @memberof MediaDto
     */
    lastUpdate: Date;
    /**
     * 
     * @type {MediaType}
     * @memberof MediaDto
     */
    type: MediaType;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof MediaDto
     */
    metadata: { [key: string]: string; };
}



/**
 * Check if a given object implements the MediaDto interface.
 */
export function instanceOfMediaDto(value: any): value is MediaDto {
    if (!value) {
        return false;
    }
    if (!('mimeType' in value) || value['mimeType'] === undefined) return false;
    if (!('fileName' in value) || value['fileName'] === undefined) return false;
    if (!('fileInfo' in value) || value['fileInfo'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('fileSize' in value) || value['fileSize'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('lastUpdate' in value) || value['lastUpdate'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('metadata' in value) || value['metadata'] === undefined) return false;
    return true;
}

export function MediaDtoFromJSON(json: any): MediaDto {
    return MediaDtoFromJSONTyped(json, false);
}

export function MediaDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): MediaDto {
    if (json == null) {
        return json;
    }
    return {
        
        'mimeType': json['mimeType'],
        'fileName': json['fileName'],
        'fileInfo': json['fileInfo'],
        'url': json['url'],
        'fileSize': json['fileSize'],
        'created': (new Date(json['created'])),
        'lastUpdate': (new Date(json['lastUpdate'])),
        'type': MediaTypeFromJSON(json['type']),
        'metadata': json['metadata'],
    };
}

export function MediaDtoToJSON(value?: MediaDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'mimeType': value['mimeType'],
        'fileName': value['fileName'],
        'fileInfo': value['fileInfo'],
        'url': value['url'],
        'fileSize': value['fileSize'],
        'created': ((value['created']).toISOString()),
        'lastUpdate': ((value['lastUpdate']).toISOString()),
        'type': MediaTypeToJSON(value['type']),
        'metadata': value['metadata'],
    };
}