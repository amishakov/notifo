/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChannelSettingDto } from './ChannelSettingDto';
import {
    ChannelSettingDtoFromJSON,
    ChannelSettingDtoToJSON,
} from './ChannelSettingDto';

/**
 * 
 * @export
 * @interface ProfileDto
 */
export interface ProfileDto {
    /**
     * The full name of the user.
     * @type {string}
     * @memberof ProfileDto
     */
    fullName: string;
    /**
     * The email of the user.
     * @type {string}
     * @memberof ProfileDto
     */
    emailAddress: string;
    /**
     * The phone number.
     * @type {string}
     * @memberof ProfileDto
     */
    phoneNumber?: string | null;
    /**
     * The allowed Topics.
     * @type {Array<string>}
     * @memberof ProfileDto
     */
    allowedTopics: Array<string>;
    /**
     * The preferred language of the user.
     * @type {string}
     * @memberof ProfileDto
     */
    preferredLanguage?: string | null;
    /**
     * The timezone of the user.
     * @type {string}
     * @memberof ProfileDto
     */
    preferredTimezone?: string | null;
    /**
     * The supported languages.
     * @type {Array<string>}
     * @memberof ProfileDto
     */
    supportedLanguages: Array<string>;
    /**
     * The supported timezones.
     * @type {Array<string>}
     * @memberof ProfileDto
     */
    supportedTimezones: Array<string>;
    /**
     * Notification settings per channel.
     * @type {{ [key: string]: ChannelSettingDto; }}
     * @memberof ProfileDto
     */
    settings: { [key: string]: ChannelSettingDto; };
}

/**
 * Check if a given object implements the ProfileDto interface.
 */
export function instanceOfProfileDto(value: any): value is ProfileDto {
    if (!value) {
        return false;
    }
    if (!('fullName' in value) || value['fullName'] === undefined) return false;
    if (!('emailAddress' in value) || value['emailAddress'] === undefined) return false;
    if (!('allowedTopics' in value) || value['allowedTopics'] === undefined) return false;
    if (!('supportedLanguages' in value) || value['supportedLanguages'] === undefined) return false;
    if (!('supportedTimezones' in value) || value['supportedTimezones'] === undefined) return false;
    if (!('settings' in value) || value['settings'] === undefined) return false;
    return true;
}

export function ProfileDtoFromJSON(json: any): ProfileDto {
    return ProfileDtoFromJSONTyped(json, false);
}

export function ProfileDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): ProfileDto {
    if (json == null) {
        return json;
    }
    return {
        
        'fullName': json['fullName'],
        'emailAddress': json['emailAddress'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'allowedTopics': json['allowedTopics'],
        'preferredLanguage': json['preferredLanguage'] == null ? undefined : json['preferredLanguage'],
        'preferredTimezone': json['preferredTimezone'] == null ? undefined : json['preferredTimezone'],
        'supportedLanguages': json['supportedLanguages'],
        'supportedTimezones': json['supportedTimezones'],
        'settings': (mapValues(json['settings'], ChannelSettingDtoFromJSON)),
    };
}

export function ProfileDtoToJSON(value?: ProfileDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'fullName': value['fullName'],
        'emailAddress': value['emailAddress'],
        'phoneNumber': value['phoneNumber'],
        'allowedTopics': value['allowedTopics'],
        'preferredLanguage': value['preferredLanguage'],
        'preferredTimezone': value['preferredTimezone'],
        'supportedLanguages': value['supportedLanguages'],
        'supportedTimezones': value['supportedTimezones'],
        'settings': (mapValues(value['settings'], x => ChannelSettingDtoToJSON(x))),
    };
}