/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MobilePushTokenDto } from './MobilePushTokenDto';
import {
    MobilePushTokenDtoFromJSON,
    MobilePushTokenDtoToJSON,
} from './MobilePushTokenDto';
import type { UserPropertyDto } from './UserPropertyDto';
import {
    UserPropertyDtoFromJSON,
    UserPropertyDtoToJSON,
} from './UserPropertyDto';
import type { ChannelSettingDto } from './ChannelSettingDto';
import {
    ChannelSettingDtoFromJSON,
    ChannelSettingDtoToJSON,
} from './ChannelSettingDto';
import type { SchedulingDto } from './SchedulingDto';
import {
    SchedulingDtoFromJSON,
    SchedulingDtoToJSON,
} from './SchedulingDto';
import type { WebPushSubscriptionDto } from './WebPushSubscriptionDto';
import {
    WebPushSubscriptionDtoFromJSON,
    WebPushSubscriptionDtoToJSON,
} from './WebPushSubscriptionDto';

/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * The ID of the user.
     * @type {string}
     * @memberof UserDto
     */
    id: string;
    /**
     * The unique api key for the user.
     * @type {string}
     * @memberof UserDto
     */
    apiKey: string;
    /**
     * The full name of the user.
     * @type {string}
     * @memberof UserDto
     */
    fullName?: string | null;
    /**
     * The email of the user.
     * @type {string}
     * @memberof UserDto
     */
    emailAddress?: string | null;
    /**
     * The phone number.
     * @type {string}
     * @memberof UserDto
     */
    phoneNumber?: string | null;
    /**
     * The preferred language of the user.
     * @type {string}
     * @memberof UserDto
     */
    preferredLanguage?: string | null;
    /**
     * The timezone of the user.
     * @type {string}
     * @memberof UserDto
     */
    preferredTimezone?: string | null;
    /**
     * The date time (ISO 8601) when the user has been created.
     * @type {Date}
     * @memberof UserDto
     */
    created: Date;
    /**
     * The date time (ISO 8601) when the user has been updated.
     * @type {Date}
     * @memberof UserDto
     */
    lastUpdate: Date;
    /**
     * The date time (ISO 8601) when the user has been received the last notification.
     * @type {Date}
     * @memberof UserDto
     */
    lastNotification?: Date | null;
    /**
     * True when only whitelisted topic are allowed.
     * @type {boolean}
     * @memberof UserDto
     */
    requiresWhitelistedTopics: boolean;
    /**
     * The user properties.
     * @type {{ [key: string]: string; }}
     * @memberof UserDto
     */
    properties?: { [key: string]: string; } | null;
    /**
     * 
     * @type {SchedulingDto}
     * @memberof UserDto
     */
    scheduling?: SchedulingDto;
    /**
     * Notification settings per channel.
     * @type {{ [key: string]: ChannelSettingDto; }}
     * @memberof UserDto
     */
    settings: { [key: string]: ChannelSettingDto; };
    /**
     * The statistics counters.
     * @type {{ [key: string]: number; }}
     * @memberof UserDto
     */
    counters: { [key: string]: number; };
    /**
     * The mobile push tokens.
     * @type {Array<MobilePushTokenDto>}
     * @memberof UserDto
     */
    mobilePushTokens: Array<MobilePushTokenDto>;
    /**
     * The web push subscriptions.
     * @type {Array<WebPushSubscriptionDto>}
     * @memberof UserDto
     */
    webPushSubscriptions: Array<WebPushSubscriptionDto>;
    /**
     * The supported user properties.
     * @type {Array<UserPropertyDto>}
     * @memberof UserDto
     */
    userProperties?: Array<UserPropertyDto> | null;
}

/**
 * Check if a given object implements the UserDto interface.
 */
export function instanceOfUserDto(value: any): value is UserDto {
    if (!value) {
        return false;
    }
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('apiKey' in value) || value['apiKey'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('lastUpdate' in value) || value['lastUpdate'] === undefined) return false;
    if (!('requiresWhitelistedTopics' in value) || value['requiresWhitelistedTopics'] === undefined) return false;
    if (!('settings' in value) || value['settings'] === undefined) return false;
    if (!('counters' in value) || value['counters'] === undefined) return false;
    if (!('mobilePushTokens' in value) || value['mobilePushTokens'] === undefined) return false;
    if (!('webPushSubscriptions' in value) || value['webPushSubscriptions'] === undefined) return false;
    return true;
}

export function UserDtoFromJSON(json: any): UserDto {
    return UserDtoFromJSONTyped(json, false);
}

export function UserDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): UserDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'apiKey': json['apiKey'],
        'fullName': json['fullName'] == null ? undefined : json['fullName'],
        'emailAddress': json['emailAddress'] == null ? undefined : json['emailAddress'],
        'phoneNumber': json['phoneNumber'] == null ? undefined : json['phoneNumber'],
        'preferredLanguage': json['preferredLanguage'] == null ? undefined : json['preferredLanguage'],
        'preferredTimezone': json['preferredTimezone'] == null ? undefined : json['preferredTimezone'],
        'created': (new Date(json['created'])),
        'lastUpdate': (new Date(json['lastUpdate'])),
        'lastNotification': json['lastNotification'] == null ? undefined : (new Date(json['lastNotification'])),
        'requiresWhitelistedTopics': json['requiresWhitelistedTopics'],
        'properties': json['properties'] == null ? undefined : json['properties'],
        'scheduling': json['scheduling'] == null ? undefined : SchedulingDtoFromJSON(json['scheduling']),
        'settings': (mapValues(json['settings'], ChannelSettingDtoFromJSON)),
        'counters': json['counters'],
        'mobilePushTokens': ((json['mobilePushTokens'] as Array<any>).map(MobilePushTokenDtoFromJSON)),
        'webPushSubscriptions': ((json['webPushSubscriptions'] as Array<any>).map(WebPushSubscriptionDtoFromJSON)),
        'userProperties': json['userProperties'] == null ? undefined : ((json['userProperties'] as Array<any>).map(UserPropertyDtoFromJSON)),
    };
}

export function UserDtoToJSON(value?: UserDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'apiKey': value['apiKey'],
        'fullName': value['fullName'],
        'emailAddress': value['emailAddress'],
        'phoneNumber': value['phoneNumber'],
        'preferredLanguage': value['preferredLanguage'],
        'preferredTimezone': value['preferredTimezone'],
        'created': ((value['created']).toISOString()),
        'lastUpdate': ((value['lastUpdate']).toISOString()),
        'lastNotification': value['lastNotification'] == null ? undefined : ((value['lastNotification'] as any).toISOString()),
        'requiresWhitelistedTopics': value['requiresWhitelistedTopics'],
        'properties': value['properties'],
        'scheduling': SchedulingDtoToJSON(value['scheduling']),
        'settings': (mapValues(value['settings'], x => ChannelSettingDtoToJSON(x))),
        'counters': value['counters'],
        'mobilePushTokens': ((value['mobilePushTokens'] as Array<any>).map(x => MobilePushTokenDtoToJSON(x))),
        'webPushSubscriptions': ((value['webPushSubscriptions'] as Array<any>).map(x => WebPushSubscriptionDtoToJSON(x))),
        'userProperties': value['userProperties'] == null ? undefined : ((value['userProperties'] as Array<any>).map(x => UserPropertyDtoToJSON(x))),
    };
}