/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { ChannelCondition } from './ChannelCondition';
import {
    ChannelConditionFromJSON,
    ChannelConditionToJSON,
} from './ChannelCondition';
import type { ChannelRequired } from './ChannelRequired';
import {
    ChannelRequiredFromJSON,
    ChannelRequiredToJSON,
} from './ChannelRequired';
import type { ChannelSend } from './ChannelSend';
import {
    ChannelSendFromJSON,
    ChannelSendToJSON,
} from './ChannelSend';

/**
 * 
 * @export
 * @interface ChannelSettingDto
 */
export interface ChannelSettingDto {
    /**
     * 
     * @type {ChannelSend}
     * @memberof ChannelSettingDto
     */
    send: ChannelSend;
    /**
     * 
     * @type {ChannelCondition}
     * @memberof ChannelSettingDto
     */
    condition: ChannelCondition;
    /**
     * 
     * @type {ChannelRequired}
     * @memberof ChannelSettingDto
     */
    required: ChannelRequired;
    /**
     * The delay in seconds.
     * @type {number}
     * @memberof ChannelSettingDto
     */
    delayInSeconds?: number | null;
    /**
     * The template if the channel supports it.
     * @type {string}
     * @memberof ChannelSettingDto
     */
    template?: string | null;
    /**
     * The grouping key to combine notifications per channel.
     * @type {string}
     * @memberof ChannelSettingDto
     */
    groupKey?: string | null;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ChannelSettingDto
     */
    properties?: { [key: string]: string; };
}



/**
 * Check if a given object implements the ChannelSettingDto interface.
 */
export function instanceOfChannelSettingDto(value: any): value is ChannelSettingDto {
    if (!value) {
        return false;
    }
    if (!('send' in value) || value['send'] === undefined) return false;
    if (!('condition' in value) || value['condition'] === undefined) return false;
    if (!('required' in value) || value['required'] === undefined) return false;
    return true;
}

export function ChannelSettingDtoFromJSON(json: any): ChannelSettingDto {
    return ChannelSettingDtoFromJSONTyped(json, false);
}

export function ChannelSettingDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): ChannelSettingDto {
    if (json == null) {
        return json;
    }
    return {
        
        'send': ChannelSendFromJSON(json['send']),
        'condition': ChannelConditionFromJSON(json['condition']),
        'required': ChannelRequiredFromJSON(json['required']),
        'delayInSeconds': json['delayInSeconds'] == null ? undefined : json['delayInSeconds'],
        'template': json['template'] == null ? undefined : json['template'],
        'groupKey': json['groupKey'] == null ? undefined : json['groupKey'],
        'properties': json['properties'] == null ? undefined : json['properties'],
    };
}

export function ChannelSettingDtoToJSON(value?: ChannelSettingDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'send': ChannelSendToJSON(value['send']),
        'condition': ChannelConditionToJSON(value['condition']),
        'required': ChannelRequiredToJSON(value['required']),
        'delayInSeconds': value['delayInSeconds'],
        'template': value['template'],
        'groupKey': value['groupKey'],
        'properties': value['properties'],
    };
}