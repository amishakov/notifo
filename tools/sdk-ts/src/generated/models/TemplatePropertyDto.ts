/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { LiquidPropertyType } from './LiquidPropertyType';
import {
    LiquidPropertyTypeFromJSON,
    LiquidPropertyTypeToJSON,
} from './LiquidPropertyType';

/**
 * 
 * @export
 * @interface TemplatePropertyDto
 */
export interface TemplatePropertyDto {
    /**
     * The property path.
     * @type {string}
     * @memberof TemplatePropertyDto
     */
    path: string;
    /**
     * 
     * @type {LiquidPropertyType}
     * @memberof TemplatePropertyDto
     */
    type: LiquidPropertyType;
    /**
     * The optional description.
     * @type {string}
     * @memberof TemplatePropertyDto
     */
    description?: string | null;
}



/**
 * Check if a given object implements the TemplatePropertyDto interface.
 */
export function instanceOfTemplatePropertyDto(value: any): value is TemplatePropertyDto {
    if (!value) {
        return false;
    }
    if (!('path' in value) || value['path'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function TemplatePropertyDtoFromJSON(json: any): TemplatePropertyDto {
    return TemplatePropertyDtoFromJSONTyped(json, false);
}

export function TemplatePropertyDtoFromJSONTyped(json: any, _ignoreDiscriminator: boolean): TemplatePropertyDto {
    if (json == null) {
        return json;
    }
    return {
        
        'path': json['path'],
        'type': LiquidPropertyTypeFromJSON(json['type']),
        'description': json['description'] == null ? undefined : json['description'],
    };
}

export function TemplatePropertyDtoToJSON(value?: TemplatePropertyDto | null, _ignoreDiscriminator = false): any {
    if (value == null) {
        return value;
    }
    return {
        
        'path': value['path'],
        'type': LiquidPropertyTypeToJSON(value['type']),
        'description': value['description'],
    };
}