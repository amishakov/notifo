/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChannelTemplateDetailsDtoOfMessagingTemplateDto,
  CreateChannelTemplateLanguageDto,
  ListResponseDtoOfChannelTemplateDto,
  ListResponseDtoOfTemplatePropertyDto,
  MessagingTemplateDto,
  UpdateChannelTemplateDtoOfMessagingTemplateDto,
} from '../models/index';
import {
    ChannelTemplateDetailsDtoOfMessagingTemplateDtoFromJSON,
    CreateChannelTemplateLanguageDtoToJSON,
    ListResponseDtoOfChannelTemplateDtoFromJSON,
    ListResponseDtoOfTemplatePropertyDtoFromJSON,
    MessagingTemplateDtoToJSON,
    UpdateChannelTemplateDtoOfMessagingTemplateDtoToJSON,
} from '../models/index';

export interface MessagingTemplatesDeleteTemplateRequestRaw {
    appId: string;
    code: string;
}

export interface MessagingTemplatesDeleteTemplateLanguageRequestRaw {
    appId: string;
    code: string;
    language: string;
}

export interface MessagingTemplatesGetPropertiesRequestRaw {
    appId: string;
}

export interface MessagingTemplatesGetTemplateRequestRaw {
    appId: string;
    id: string;
}

export interface MessagingTemplatesGetTemplatesRequest {
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface MessagingTemplatesGetTemplatesRequestRaw {
    appId: string;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface MessagingTemplatesPostTemplateRequestRaw {
    appId: string;
    body: object;
}

export interface MessagingTemplatesPostTemplateLanguageRequestRaw {
    appId: string;
    code: string;
    createChannelTemplateLanguageDto: CreateChannelTemplateLanguageDto;
}

export interface MessagingTemplatesPutTemplateRequestRaw {
    appId: string;
    code: string;
    updateChannelTemplateDtoOfMessagingTemplateDto: UpdateChannelTemplateDtoOfMessagingTemplateDto;
}

export interface MessagingTemplatesPutTemplateLanguageRequestRaw {
    appId: string;
    code: string;
    language: string;
    messagingTemplateDto: MessagingTemplateDto;
}

/**
 * MessagingTemplatesApi - interface
 * 
 * @export
 * @interface MessagingTemplatesApiInterface
 */
export interface MessagingTemplatesApiInterface {
    /**
     * 
     * @summary Delete a channel template.
     * @param {string} appId The ID of the app where the templates belong to.
     * @param {string} code The template ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingTemplatesApiInterface
     */
    deleteTemplateRaw(appId: string, code: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a channel template.
     */
    deleteTemplate(appId: string, code: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a language channel template.
     * @param {string} appId The ID of the app where the templates belong to.
     * @param {string} code The template ID.
     * @param {string} language The language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingTemplatesApiInterface
     */
    deleteTemplateLanguageRaw(appId: string, code: string, language: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>>;

    /**
     * Delete a language channel template.
     */
    deleteTemplateLanguage(appId: string, code: string, language: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto>;

    /**
     * 
     * @summary Get the template properties.
     * @param {string} appId The id of the app where the templates belong to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingTemplatesApiInterface
     */
    getPropertiesRaw(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfTemplatePropertyDto>>;

    /**
     * Get the template properties.
     */
    getProperties(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfTemplatePropertyDto>;

    /**
     * 
     * @summary Get the channel template by id.
     * @param {string} appId The ID of the app where the templates belong to.
     * @param {string} id The template ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingTemplatesApiInterface
     */
    getTemplateRaw(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>>;

    /**
     * Get the channel template by id.
     */
    getTemplate(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto>;

    /**
     * 
     * @summary Get the channel templates.
     * @param {string} appId The ID of the app where the templates belong to.
     * @param {string} [query] The optional query to search for items.
     * @param {number} [take] The number of items to return.
     * @param {number} [skip] The number of items to skip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingTemplatesApiInterface
     */
    getTemplatesRaw(appId: string, requestParameters?: MessagingTemplatesGetTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfChannelTemplateDto>>;

    /**
     * Get the channel templates.
     */
    getTemplates(appId: string, requestParameters?: MessagingTemplatesGetTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfChannelTemplateDto>;

    /**
     * 
     * @summary Create a channel template.
     * @param {string} appId The ID of the app where the templates belong to.
     * @param {object} body The request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingTemplatesApiInterface
     */
    postTemplateRaw(appId: string, body: object, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>>;

    /**
     * Create a channel template.
     */
    postTemplate(appId: string, body: object, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto>;

    /**
     * 
     * @summary Create an app template language.
     * @param {string} appId The ID of the app where the templates belong to.
     * @param {string} code The template code.
     * @param {CreateChannelTemplateLanguageDto} createChannelTemplateLanguageDto The request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingTemplatesApiInterface
     */
    postTemplateLanguageRaw(appId: string, code: string, createChannelTemplateLanguageDto: CreateChannelTemplateLanguageDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>>;

    /**
     * Create an app template language.
     */
    postTemplateLanguage(appId: string, code: string, createChannelTemplateLanguageDto: CreateChannelTemplateLanguageDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto>;

    /**
     * 
     * @summary Update an app template.
     * @param {string} appId The ID of the app where the templates belong to.
     * @param {string} code The template code.
     * @param {UpdateChannelTemplateDtoOfMessagingTemplateDto} updateChannelTemplateDtoOfMessagingTemplateDto The request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingTemplatesApiInterface
     */
    putTemplateRaw(appId: string, code: string, updateChannelTemplateDtoOfMessagingTemplateDto: UpdateChannelTemplateDtoOfMessagingTemplateDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>>;

    /**
     * Update an app template.
     */
    putTemplate(appId: string, code: string, updateChannelTemplateDtoOfMessagingTemplateDto: UpdateChannelTemplateDtoOfMessagingTemplateDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto>;

    /**
     * 
     * @summary Update a channel template language.
     * @param {string} appId The ID of the app where the templates belong to.
     * @param {string} code The template code.
     * @param {string} language The language.
     * @param {MessagingTemplateDto} messagingTemplateDto The request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingTemplatesApiInterface
     */
    putTemplateLanguageRaw(appId: string, code: string, language: string, messagingTemplateDto: MessagingTemplateDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>>;

    /**
     * Update a channel template language.
     */
    putTemplateLanguage(appId: string, code: string, language: string, messagingTemplateDto: MessagingTemplateDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto>;

}

/**
 * 
 */
export class MessagingTemplatesApi extends runtime.BaseAPI implements MessagingTemplatesApiInterface {

    /**
     * Delete a channel template.
     */
    async deleteTemplateRaw(appId: string, code: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _code = code;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_code == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/messaging-templates/{code}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"code"}}`, encodeURIComponent(String(_code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a channel template.
     */
    async deleteTemplate(appId: string, code: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTemplateRaw(appId, code, initOverrides);
    }

    /**
     * Delete a language channel template.
     */
    async deleteTemplateLanguageRaw(appId: string, code: string, language: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>> {
        const _appId = appId;
        const _code = code;
        const _language = language;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_code == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling ().'
            );
        }

        if (_language == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/messaging-templates/{code}/{language}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"code"}}`, encodeURIComponent(String(_code))).replace(`{${"language"}}`, encodeURIComponent(String(_language))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelTemplateDetailsDtoOfMessagingTemplateDtoFromJSON(jsonValue));
    }

    /**
     * Delete a language channel template.
     */
    async deleteTemplateLanguage(appId: string, code: string, language: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto> {
        const response = await this.deleteTemplateLanguageRaw(appId, code, language, initOverrides);
        return await response.value();
    }

    /**
     * Get the template properties.
     */
    async getPropertiesRaw(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfTemplatePropertyDto>> {
        const _appId = appId;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/messaging-templates/properties`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfTemplatePropertyDtoFromJSON(jsonValue));
    }

    /**
     * Get the template properties.
     */
    async getProperties(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfTemplatePropertyDto> {
        const response = await this.getPropertiesRaw(appId, initOverrides);
        return await response.value();
    }

    /**
     * Get the channel template by id.
     */
    async getTemplateRaw(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>> {
        const _appId = appId;
        const _id = id;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/messaging-templates/{id}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelTemplateDetailsDtoOfMessagingTemplateDtoFromJSON(jsonValue));
    }

    /**
     * Get the channel template by id.
     */
    async getTemplate(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto> {
        const response = await this.getTemplateRaw(appId, id, initOverrides);
        return await response.value();
    }

    /**
     * Get the channel templates.
     */
    async getTemplatesRaw(appId: string, requestParameters: MessagingTemplatesGetTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfChannelTemplateDto>> {
        const _appId = appId;
        const _query = requestParameters?.['query'];
        const _take = requestParameters?.['take'];
        const _skip = requestParameters?.['skip'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/messaging-templates`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfChannelTemplateDtoFromJSON(jsonValue));
    }

    /**
     * Get the channel templates.
     */
    async getTemplates(appId: string, requestParameters: MessagingTemplatesGetTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfChannelTemplateDto> {
        const response = await this.getTemplatesRaw(appId, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a channel template.
     */
    async postTemplateRaw(appId: string, body: object, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>> {
        const _appId = appId;
        const _body = body;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_body == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/messaging-templates`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: _body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelTemplateDetailsDtoOfMessagingTemplateDtoFromJSON(jsonValue));
    }

    /**
     * Create a channel template.
     */
    async postTemplate(appId: string, body: object, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto> {
        const response = await this.postTemplateRaw(appId, body, initOverrides);
        return await response.value();
    }

    /**
     * Create an app template language.
     */
    async postTemplateLanguageRaw(appId: string, code: string, createChannelTemplateLanguageDto: CreateChannelTemplateLanguageDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>> {
        const _appId = appId;
        const _code = code;
        const _createChannelTemplateLanguageDto = createChannelTemplateLanguageDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_code == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling ().'
            );
        }

        if (_createChannelTemplateLanguageDto == null) {
            throw new runtime.RequiredError(
                'createChannelTemplateLanguageDto',
                'Required parameter "createChannelTemplateLanguageDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/messaging-templates/{code}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"code"}}`, encodeURIComponent(String(_code))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChannelTemplateLanguageDtoToJSON(_createChannelTemplateLanguageDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelTemplateDetailsDtoOfMessagingTemplateDtoFromJSON(jsonValue));
    }

    /**
     * Create an app template language.
     */
    async postTemplateLanguage(appId: string, code: string, createChannelTemplateLanguageDto: CreateChannelTemplateLanguageDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto> {
        const response = await this.postTemplateLanguageRaw(appId, code, createChannelTemplateLanguageDto, initOverrides);
        return await response.value();
    }

    /**
     * Update an app template.
     */
    async putTemplateRaw(appId: string, code: string, updateChannelTemplateDtoOfMessagingTemplateDto: UpdateChannelTemplateDtoOfMessagingTemplateDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>> {
        const _appId = appId;
        const _code = code;
        const _updateChannelTemplateDtoOfMessagingTemplateDto = updateChannelTemplateDtoOfMessagingTemplateDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_code == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling ().'
            );
        }

        if (_updateChannelTemplateDtoOfMessagingTemplateDto == null) {
            throw new runtime.RequiredError(
                'updateChannelTemplateDtoOfMessagingTemplateDto',
                'Required parameter "updateChannelTemplateDtoOfMessagingTemplateDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/messaging-templates/{code}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"code"}}`, encodeURIComponent(String(_code))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateChannelTemplateDtoOfMessagingTemplateDtoToJSON(_updateChannelTemplateDtoOfMessagingTemplateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelTemplateDetailsDtoOfMessagingTemplateDtoFromJSON(jsonValue));
    }

    /**
     * Update an app template.
     */
    async putTemplate(appId: string, code: string, updateChannelTemplateDtoOfMessagingTemplateDto: UpdateChannelTemplateDtoOfMessagingTemplateDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto> {
        const response = await this.putTemplateRaw(appId, code, updateChannelTemplateDtoOfMessagingTemplateDto, initOverrides);
        return await response.value();
    }

    /**
     * Update a channel template language.
     */
    async putTemplateLanguageRaw(appId: string, code: string, language: string, messagingTemplateDto: MessagingTemplateDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChannelTemplateDetailsDtoOfMessagingTemplateDto>> {
        const _appId = appId;
        const _code = code;
        const _language = language;
        const _messagingTemplateDto = messagingTemplateDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_code == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling ().'
            );
        }

        if (_language == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling ().'
            );
        }

        if (_messagingTemplateDto == null) {
            throw new runtime.RequiredError(
                'messagingTemplateDto',
                'Required parameter "messagingTemplateDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/messaging-templates/{code}/{language}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"code"}}`, encodeURIComponent(String(_code))).replace(`{${"language"}}`, encodeURIComponent(String(_language))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MessagingTemplateDtoToJSON(_messagingTemplateDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChannelTemplateDetailsDtoOfMessagingTemplateDtoFromJSON(jsonValue));
    }

    /**
     * Update a channel template language.
     */
    async putTemplateLanguage(appId: string, code: string, language: string, messagingTemplateDto: MessagingTemplateDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChannelTemplateDetailsDtoOfMessagingTemplateDto> {
        const response = await this.putTemplateLanguageRaw(appId, code, language, messagingTemplateDto, initOverrides);
        return await response.value();
    }

}
