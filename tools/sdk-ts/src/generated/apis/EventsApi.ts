/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CancelEventDto,
  CancelResponseDto,
  ListResponseDtoOfEventDto,
  PublishDto,
  PublishManyDto,
} from '../models/index';
import {
    CancelEventDtoToJSON,
    CancelResponseDtoFromJSON,
    ListResponseDtoOfEventDtoFromJSON,
    PublishDtoToJSON,
    PublishManyDtoToJSON,
} from '../models/index';

export interface EventsCancelEventRequestRaw {
    appId: string;
    cancelEventDto: CancelEventDto;
}

export interface EventsGetEventsRequest {
    channels?: Array<string> | null;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface EventsGetEventsRequestRaw {
    appId: string;
    channels?: Array<string> | null;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface EventsPostEventsRequestRaw {
    appId: string;
    publishManyDto: PublishManyDto;
}

export interface EventsPostMyEventsRequestRaw {
    publishDto: PublishDto;
}

/**
 * EventsApi - interface
 * 
 * @export
 * @interface EventsApiInterface
 */
export interface EventsApiInterface {
    /**
     * 
     * @summary Cancels a scheduled event.
     * @param {string} appId The app where the events belongs to.
     * @param {CancelEventDto} cancelEventDto The cancel request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    cancelEventRaw(appId: string, cancelEventDto: CancelEventDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelResponseDto>>;

    /**
     * Cancels a scheduled event.
     */
    cancelEvent(appId: string, cancelEventDto: CancelEventDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelResponseDto>;

    /**
     * 
     * @summary Query events.
     * @param {string} appId The app where the events belongs to.
     * @param {Array<string>} [channels] The active channels.
     * @param {string} [query] The optional query to search for items.
     * @param {number} [take] The number of items to return.
     * @param {number} [skip] The number of items to skip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    getEventsRaw(appId: string, requestParameters?: EventsGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfEventDto>>;

    /**
     * Query events.
     */
    getEvents(appId: string, requestParameters?: EventsGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfEventDto>;

    /**
     * 
     * @summary Publish events.
     * @param {string} appId The app where the events belongs to.
     * @param {PublishManyDto} publishManyDto The publish request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    postEventsRaw(appId: string, publishManyDto: PublishManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Publish events.
     */
    postEvents(appId: string, publishManyDto: PublishManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Publish an event for the current user.
     * @param {PublishDto} publishDto The publish request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApiInterface
     */
    postMyEventsRaw(publishDto: PublishDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Publish an event for the current user.
     */
    postMyEvents(publishDto: PublishDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI implements EventsApiInterface {

    /**
     * Cancels a scheduled event.
     */
    async cancelEventRaw(appId: string, cancelEventDto: CancelEventDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelResponseDto>> {
        const _appId = appId;
        const _cancelEventDto = cancelEventDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_cancelEventDto == null) {
            throw new runtime.RequiredError(
                'cancelEventDto',
                'Required parameter "cancelEventDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/events`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: CancelEventDtoToJSON(_cancelEventDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelResponseDtoFromJSON(jsonValue));
    }

    /**
     * Cancels a scheduled event.
     */
    async cancelEvent(appId: string, cancelEventDto: CancelEventDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelResponseDto> {
        const response = await this.cancelEventRaw(appId, cancelEventDto, initOverrides);
        return await response.value();
    }

    /**
     * Query events.
     */
    async getEventsRaw(appId: string, requestParameters: EventsGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfEventDto>> {
        const _appId = appId;
        const _channels = requestParameters?.['channels'];
        const _query = requestParameters?.['query'];
        const _take = requestParameters?.['take'];
        const _skip = requestParameters?.['skip'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_channels != null) {
            queryParameters['Channels'] = _channels;
        }

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/events`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfEventDtoFromJSON(jsonValue));
    }

    /**
     * Query events.
     */
    async getEvents(appId: string, requestParameters: EventsGetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfEventDto> {
        const response = await this.getEventsRaw(appId, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Publish events.
     */
    async postEventsRaw(appId: string, publishManyDto: PublishManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _publishManyDto = publishManyDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_publishManyDto == null) {
            throw new runtime.RequiredError(
                'publishManyDto',
                'Required parameter "publishManyDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/events`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublishManyDtoToJSON(_publishManyDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Publish events.
     */
    async postEvents(appId: string, publishManyDto: PublishManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postEventsRaw(appId, publishManyDto, initOverrides);
    }

    /**
     * Publish an event for the current user.
     */
    async postMyEventsRaw(publishDto: PublishDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _publishDto = publishDto;

        if (_publishDto == null) {
            throw new runtime.RequiredError(
                'publishDto',
                'Required parameter "publishDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/me/events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublishDtoToJSON(_publishDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Publish an event for the current user.
     */
    async postMyEvents(publishDto: PublishDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMyEventsRaw(publishDto, initOverrides);
    }

}
