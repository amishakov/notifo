/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DeviceNotificationsQueryScope,
  ListResponseDtoOfUserNotificationDetailsDto,
  ListResponseDtoOfUserNotificationDto,
  TrackNotificationDto,
} from '../models/index';
import {
    ListResponseDtoOfUserNotificationDetailsDtoFromJSON,
    ListResponseDtoOfUserNotificationDtoFromJSON,
    TrackNotificationDtoToJSON,
} from '../models/index';

export interface NotificationsConfirmMeRequestRaw {
    trackNotificationDto: TrackNotificationDto;
}

export interface NotificationsGetAllNotificationsRequest {
    channels?: Array<string> | null;
    channel?: string | null;
    correlationId?: string | null;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface NotificationsGetAllNotificationsRequestRaw {
    appId: string;
    channels?: Array<string> | null;
    channel?: string | null;
    correlationId?: string | null;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface NotificationsGetMyArchiveRequest {
    channel?: string | null;
}

export interface NotificationsGetMyArchiveRequestRaw {
    channel?: string | null;
}

export interface NotificationsGetMyDeviceNotificationsRequest {
    deviceIdentifier?: string | null;
    after?: Date;
    scope?: DeviceNotificationsQueryScope;
    take?: number;
}

export interface NotificationsGetMyDeviceNotificationsRequestRaw {
    deviceIdentifier?: string | null;
    after?: Date;
    scope?: DeviceNotificationsQueryScope;
    take?: number;
}

export interface NotificationsGetMyNotificationsRequest {
    channels?: Array<string> | null;
    channel?: string | null;
    correlationId?: string | null;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface NotificationsGetMyNotificationsRequestRaw {
    channels?: Array<string> | null;
    channel?: string | null;
    correlationId?: string | null;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface NotificationsGetNotificationsRequest {
    channels?: Array<string> | null;
    channel?: string | null;
    correlationId?: string | null;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface NotificationsGetNotificationsRequestRaw {
    appId: string;
    id: string;
    channels?: Array<string> | null;
    channel?: string | null;
    correlationId?: string | null;
    query?: string | null;
    take?: number;
    skip?: number;
}

/**
 * NotificationsApi - interface
 * 
 * @export
 * @interface NotificationsApiInterface
 */
export interface NotificationsApiInterface {
    /**
     * 
     * @summary Confirms the user notifications for the current user.
     * @param {TrackNotificationDto} trackNotificationDto The request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    confirmMeRaw(trackNotificationDto: TrackNotificationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Confirms the user notifications for the current user.
     */
    confirmMe(trackNotificationDto: TrackNotificationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Query notifications.
     * @param {string} appId The app where the user belongs to.
     * @param {Array<string>} [channels] The active channels.
     * @param {string} [channel] The source channel.
     * @param {string} [correlationId] The correlation ID, that can be used to query notifications.
     * @param {string} [query] The optional query to search for items.
     * @param {number} [take] The number of items to return.
     * @param {number} [skip] The number of items to skip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    getAllNotificationsRaw(appId: string, requestParameters?: NotificationsGetAllNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserNotificationDetailsDto>>;

    /**
     * Query notifications.
     */
    getAllNotifications(appId: string, requestParameters?: NotificationsGetAllNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserNotificationDetailsDto>;

    /**
     * 
     * @summary Query archived user notifications of the current user.
     * @param {string} [channel] The tracking channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    getMyArchiveRaw(requestParameters?: NotificationsGetMyArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserNotificationDto>>;

    /**
     * Query archived user notifications of the current user.
     */
    getMyArchive(requestParameters?: NotificationsGetMyArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserNotificationDto>;

    /**
     * 
     * @summary Query user notifications of the current user for a specific device.
     * @param {string} [deviceIdentifier] The device identifier (aka mobile push token).
     * @param {Date} [after] The max age of the notifications.
     * @param {DeviceNotificationsQueryScope} [scope] The scope of the query.
     * @param {number} [take] The number of notifications to query.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    getMyDeviceNotificationsRaw(requestParameters?: NotificationsGetMyDeviceNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserNotificationDto>>;

    /**
     * Query user notifications of the current user for a specific device.
     */
    getMyDeviceNotifications(requestParameters?: NotificationsGetMyDeviceNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserNotificationDto>;

    /**
     * 
     * @summary Query user notifications of the current user.
     * @param {Array<string>} [channels] The active channels.
     * @param {string} [channel] The source channel.
     * @param {string} [correlationId] The correlation ID, that can be used to query notifications.
     * @param {string} [query] The optional query to search for items.
     * @param {number} [take] The number of items to return.
     * @param {number} [skip] The number of items to skip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    getMyNotificationsRaw(requestParameters?: NotificationsGetMyNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserNotificationDto>>;

    /**
     * Query user notifications of the current user.
     */
    getMyNotifications(requestParameters?: NotificationsGetMyNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserNotificationDto>;

    /**
     * 
     * @summary Query user notifications.
     * @param {string} appId The app where the user belongs to.
     * @param {string} id The user id.
     * @param {Array<string>} [channels] The active channels.
     * @param {string} [channel] The source channel.
     * @param {string} [correlationId] The correlation ID, that can be used to query notifications.
     * @param {string} [query] The optional query to search for items.
     * @param {number} [take] The number of items to return.
     * @param {number} [skip] The number of items to skip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApiInterface
     */
    getNotificationsRaw(appId: string, id: string, requestParameters?: NotificationsGetNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserNotificationDetailsDto>>;

    /**
     * Query user notifications.
     */
    getNotifications(appId: string, id: string, requestParameters?: NotificationsGetNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserNotificationDetailsDto>;

}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI implements NotificationsApiInterface {

    /**
     * Confirms the user notifications for the current user.
     */
    async confirmMeRaw(trackNotificationDto: TrackNotificationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _trackNotificationDto = trackNotificationDto;

        if (_trackNotificationDto == null) {
            throw new runtime.RequiredError(
                'trackNotificationDto',
                'Required parameter "trackNotificationDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/me/notifications/handled`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrackNotificationDtoToJSON(_trackNotificationDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Confirms the user notifications for the current user.
     */
    async confirmMe(trackNotificationDto: TrackNotificationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.confirmMeRaw(trackNotificationDto, initOverrides);
    }

    /**
     * Query notifications.
     */
    async getAllNotificationsRaw(appId: string, requestParameters: NotificationsGetAllNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserNotificationDetailsDto>> {
        const _appId = appId;
        const _channels = requestParameters?.['channels'];
        const _channel = requestParameters?.['channel'];
        const _correlationId = requestParameters?.['correlationId'];
        const _query = requestParameters?.['query'];
        const _take = requestParameters?.['take'];
        const _skip = requestParameters?.['skip'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_channels != null) {
            queryParameters['Channels'] = _channels;
        }

        if (_channel != null) {
            queryParameters['Channel'] = _channel;
        }

        if (_correlationId != null) {
            queryParameters['CorrelationId'] = _correlationId;
        }

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/notifications`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfUserNotificationDetailsDtoFromJSON(jsonValue));
    }

    /**
     * Query notifications.
     */
    async getAllNotifications(appId: string, requestParameters: NotificationsGetAllNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserNotificationDetailsDto> {
        const response = await this.getAllNotificationsRaw(appId, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query archived user notifications of the current user.
     */
    async getMyArchiveRaw(requestParameters: NotificationsGetMyArchiveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserNotificationDto>> {
        const _channel = requestParameters?.['channel'];

        const queryParameters: any = {};

        if (_channel != null) {
            queryParameters['channel'] = _channel;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/me/notifications/archive`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfUserNotificationDtoFromJSON(jsonValue));
    }

    /**
     * Query archived user notifications of the current user.
     */
    async getMyArchive(requestParameters: NotificationsGetMyArchiveRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserNotificationDto> {
        const response = await this.getMyArchiveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query user notifications of the current user for a specific device.
     */
    async getMyDeviceNotificationsRaw(requestParameters: NotificationsGetMyDeviceNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserNotificationDto>> {
        const _deviceIdentifier = requestParameters?.['deviceIdentifier'];
        const _after = requestParameters?.['after'];
        const _scope = requestParameters?.['scope'];
        const _take = requestParameters?.['take'];

        const queryParameters: any = {};

        if (_deviceIdentifier != null) {
            queryParameters['DeviceIdentifier'] = _deviceIdentifier;
        }

        if (_after != null) {
            queryParameters['After'] = (_after as any).toISOString();
        }

        if (_scope != null) {
            queryParameters['Scope'] = _scope;
        }

        if (_take != null) {
            queryParameters['Take'] = _take;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/me/notifications/device`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfUserNotificationDtoFromJSON(jsonValue));
    }

    /**
     * Query user notifications of the current user for a specific device.
     */
    async getMyDeviceNotifications(requestParameters: NotificationsGetMyDeviceNotificationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserNotificationDto> {
        const response = await this.getMyDeviceNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query user notifications of the current user.
     */
    async getMyNotificationsRaw(requestParameters: NotificationsGetMyNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserNotificationDto>> {
        const _channels = requestParameters?.['channels'];
        const _channel = requestParameters?.['channel'];
        const _correlationId = requestParameters?.['correlationId'];
        const _query = requestParameters?.['query'];
        const _take = requestParameters?.['take'];
        const _skip = requestParameters?.['skip'];

        const queryParameters: any = {};

        if (_channels != null) {
            queryParameters['Channels'] = _channels;
        }

        if (_channel != null) {
            queryParameters['Channel'] = _channel;
        }

        if (_correlationId != null) {
            queryParameters['CorrelationId'] = _correlationId;
        }

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/me/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfUserNotificationDtoFromJSON(jsonValue));
    }

    /**
     * Query user notifications of the current user.
     */
    async getMyNotifications(requestParameters: NotificationsGetMyNotificationsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserNotificationDto> {
        const response = await this.getMyNotificationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query user notifications.
     */
    async getNotificationsRaw(appId: string, id: string, requestParameters: NotificationsGetNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserNotificationDetailsDto>> {
        const _appId = appId;
        const _id = id;
        const _channels = requestParameters?.['channels'];
        const _channel = requestParameters?.['channel'];
        const _correlationId = requestParameters?.['correlationId'];
        const _query = requestParameters?.['query'];
        const _take = requestParameters?.['take'];
        const _skip = requestParameters?.['skip'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_channels != null) {
            queryParameters['Channels'] = _channels;
        }

        if (_channel != null) {
            queryParameters['Channel'] = _channel;
        }

        if (_correlationId != null) {
            queryParameters['CorrelationId'] = _correlationId;
        }

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/users/{id}/notifications`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfUserNotificationDetailsDtoFromJSON(jsonValue));
    }

    /**
     * Query user notifications.
     */
    async getNotifications(appId: string, id: string, requestParameters: NotificationsGetNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserNotificationDetailsDto> {
        const response = await this.getNotificationsRaw(appId, id, requestParameters, initOverrides);
        return await response.value();
    }

}
