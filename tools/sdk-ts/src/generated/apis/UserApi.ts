/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminProfileDto,
  ListResponseDtoOfSubscriptionDto,
  ProfileDto,
  SubscribeManyDto,
  SubscriptionDto,
  UpdateProfileDto,
  UserTopicDto,
} from '../models/index';
import {
    AdminProfileDtoFromJSON,
    ListResponseDtoOfSubscriptionDtoFromJSON,
    ProfileDtoFromJSON,
    SubscribeManyDtoToJSON,
    SubscriptionDtoFromJSON,
    UpdateProfileDtoToJSON,
    UserTopicDtoFromJSON,
} from '../models/index';

export interface UserDeleteSubscriptionRequestRaw {
    prefix: string;
}

export interface UserGetMySubscriptionRequestRaw {
    topic: string;
}

export interface UserGetMySubscriptionsRequest {
    topics?: string | null;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface UserGetMySubscriptionsRequestRaw {
    topics?: string | null;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface UserGetTopicsRequest {
    language?: string | null;
}

export interface UserGetTopicsRequestRaw {
    language?: string | null;
}

export interface UserPostMySubscriptionsRequestRaw {
    subscribeManyDto: SubscribeManyDto;
}

export interface UserPostUserRequestRaw {
    updateProfileDto: UpdateProfileDto;
}

/**
 * UserApi - interface
 * 
 * @export
 * @interface UserApiInterface
 */
export interface UserApiInterface {
    /**
     * User Id and App Id are resolved using the API token.
     * @summary Remove my subscription.
     * @param {string} prefix The topic prefix.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    deleteSubscriptionRaw(prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * User Id and App Id are resolved using the API token.
     * Remove my subscription.
     */
    deleteSubscription(prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get the current admin user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getAdminUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminProfileDto>>;

    /**
     * Get the current admin user.
     */
    getAdminUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminProfileDto>;

    /**
     * User Id and App Id are resolved using the API token.
     * @summary Gets a user subscription.
     * @param {string} topic The topic path.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getMySubscriptionRaw(topic: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionDto>>;

    /**
     * User Id and App Id are resolved using the API token.
     * Gets a user subscription.
     */
    getMySubscription(topic: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionDto>;

    /**
     * 
     * @summary Query the user subscriptions.
     * @param {string} [topics] The topics we are interested in.
     * @param {string} [query] The optional query to search for items.
     * @param {number} [take] The number of items to return.
     * @param {number} [skip] The number of items to skip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getMySubscriptionsRaw(requestParameters?: UserGetMySubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfSubscriptionDto>>;

    /**
     * Query the user subscriptions.
     */
    getMySubscriptions(requestParameters?: UserGetMySubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfSubscriptionDto>;

    /**
     * 
     * @summary Query the user topics.
     * @param {string} [language] The optional language.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getTopicsRaw(requestParameters?: UserGetTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserTopicDto>>>;

    /**
     * Query the user topics.
     */
    getTopics(requestParameters?: UserGetTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserTopicDto>>;

    /**
     * 
     * @summary Get the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDto>>;

    /**
     * Get the current user.
     */
    getUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDto>;

    /**
     * User Id and App Id are resolved using the API token.
     * @summary Upserts or deletes my subscriptions.
     * @param {SubscribeManyDto} subscribeManyDto The subscription settings.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postMySubscriptionsRaw(subscribeManyDto: SubscribeManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * User Id and App Id are resolved using the API token.
     * Upserts or deletes my subscriptions.
     */
    postMySubscriptions(subscribeManyDto: SubscribeManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Update the user.
     * @param {UpdateProfileDto} updateProfileDto The upsert request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    postUserRaw(updateProfileDto: UpdateProfileDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDto>>;

    /**
     * Update the user.
     */
    postUser(updateProfileDto: UpdateProfileDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDto>;

}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI implements UserApiInterface {

    /**
     * User Id and App Id are resolved using the API token.
     * Remove my subscription.
     */
    async deleteSubscriptionRaw(prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _prefix = prefix;

        if (_prefix == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/me/subscriptions/{prefix}`.replace(`{${"prefix"}}`, encodeURIComponent(String(_prefix))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User Id and App Id are resolved using the API token.
     * Remove my subscription.
     */
    async deleteSubscription(prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSubscriptionRaw(prefix, initOverrides);
    }

    /**
     * Get the current admin user.
     */
    async getAdminUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminProfileDto>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/me/admin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminProfileDtoFromJSON(jsonValue));
    }

    /**
     * Get the current admin user.
     */
    async getAdminUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminProfileDto> {
        const response = await this.getAdminUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * User Id and App Id are resolved using the API token.
     * Gets a user subscription.
     */
    async getMySubscriptionRaw(topic: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SubscriptionDto>> {
        const _topic = topic;

        if (_topic == null) {
            throw new runtime.RequiredError(
                'topic',
                'Required parameter "topic" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/me/subscriptions/{topic}`.replace(`{${"topic"}}`, encodeURIComponent(String(_topic))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionDtoFromJSON(jsonValue));
    }

    /**
     * User Id and App Id are resolved using the API token.
     * Gets a user subscription.
     */
    async getMySubscription(topic: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubscriptionDto> {
        const response = await this.getMySubscriptionRaw(topic, initOverrides);
        return await response.value();
    }

    /**
     * Query the user subscriptions.
     */
    async getMySubscriptionsRaw(requestParameters: UserGetMySubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfSubscriptionDto>> {
        const _topics = requestParameters?.['topics'];
        const _query = requestParameters?.['query'];
        const _take = requestParameters?.['take'];
        const _skip = requestParameters?.['skip'];

        const queryParameters: any = {};

        if (_topics != null) {
            queryParameters['Topics'] = _topics;
        }

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/me/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfSubscriptionDtoFromJSON(jsonValue));
    }

    /**
     * Query the user subscriptions.
     */
    async getMySubscriptions(requestParameters: UserGetMySubscriptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfSubscriptionDto> {
        const response = await this.getMySubscriptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query the user topics.
     */
    async getTopicsRaw(requestParameters: UserGetTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserTopicDto>>> {
        const _language = requestParameters?.['language'];

        const queryParameters: any = {};

        if (_language != null) {
            queryParameters['language'] = _language;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/me/topics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserTopicDtoFromJSON));
    }

    /**
     * Query the user topics.
     */
    async getTopics(requestParameters: UserGetTopicsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserTopicDto>> {
        const response = await this.getTopicsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the current user.
     */
    async getUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDto>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileDtoFromJSON(jsonValue));
    }

    /**
     * Get the current user.
     */
    async getUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDto> {
        const response = await this.getUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * User Id and App Id are resolved using the API token.
     * Upserts or deletes my subscriptions.
     */
    async postMySubscriptionsRaw(subscribeManyDto: SubscribeManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _subscribeManyDto = subscribeManyDto;

        if (_subscribeManyDto == null) {
            throw new runtime.RequiredError(
                'subscribeManyDto',
                'Required parameter "subscribeManyDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/me/subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscribeManyDtoToJSON(_subscribeManyDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User Id and App Id are resolved using the API token.
     * Upserts or deletes my subscriptions.
     */
    async postMySubscriptions(subscribeManyDto: SubscribeManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postMySubscriptionsRaw(subscribeManyDto, initOverrides);
    }

    /**
     * Update the user.
     */
    async postUserRaw(updateProfileDto: UpdateProfileDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProfileDto>> {
        const _updateProfileDto = updateProfileDto;

        if (_updateProfileDto == null) {
            throw new runtime.RequiredError(
                'updateProfileDto',
                'Required parameter "updateProfileDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/me`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProfileDtoToJSON(_updateProfileDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProfileDtoFromJSON(jsonValue));
    }

    /**
     * Update the user.
     */
    async postUser(updateProfileDto: UpdateProfileDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProfileDto> {
        const response = await this.postUserRaw(updateProfileDto, initOverrides);
        return await response.value();
    }

}
