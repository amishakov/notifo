/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListResponseDtoOfTopicDto,
  TopicDto,
  TopicQueryScope,
  UpsertTopicsDto,
} from '../models/index';
import {
    ListResponseDtoOfTopicDtoFromJSON,
    TopicDtoFromJSON,
    UpsertTopicsDtoToJSON,
} from '../models/index';

export interface TopicsDeleteTopicRequestRaw {
    appId: string;
    path: string;
}

export interface TopicsGetTopicsRequest {
    scope?: TopicQueryScope;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface TopicsGetTopicsRequestRaw {
    appId: string;
    scope?: TopicQueryScope;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface TopicsPostTopicsRequestRaw {
    appId: string;
    upsertTopicsDto: UpsertTopicsDto;
}

/**
 * TopicsApi - interface
 * 
 * @export
 * @interface TopicsApiInterface
 */
export interface TopicsApiInterface {
    /**
     * 
     * @summary Delete a topic.
     * @param {string} appId The app where the topics belong to.
     * @param {string} path The path of the topic to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiInterface
     */
    deleteTopicRaw(appId: string, path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a topic.
     */
    deleteTopic(appId: string, path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Query topics.
     * @param {string} appId The app where the topics belongs to.
     * @param {TopicQueryScope} [scope] The scope of the query.
     * @param {string} [query] The optional query to search for items.
     * @param {number} [take] The number of items to return.
     * @param {number} [skip] The number of items to skip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiInterface
     */
    getTopicsRaw(appId: string, requestParameters?: TopicsGetTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfTopicDto>>;

    /**
     * Query topics.
     */
    getTopics(appId: string, requestParameters?: TopicsGetTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfTopicDto>;

    /**
     * 
     * @summary Upsert topics.
     * @param {string} appId The app where the topics belong to.
     * @param {UpsertTopicsDto} upsertTopicsDto The upsert request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicsApiInterface
     */
    postTopicsRaw(appId: string, upsertTopicsDto: UpsertTopicsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TopicDto>>>;

    /**
     * Upsert topics.
     */
    postTopics(appId: string, upsertTopicsDto: UpsertTopicsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TopicDto>>;

}

/**
 * 
 */
export class TopicsApi extends runtime.BaseAPI implements TopicsApiInterface {

    /**
     * Delete a topic.
     */
    async deleteTopicRaw(appId: string, path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _path = path;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_path == null) {
            throw new runtime.RequiredError(
                'path',
                'Required parameter "path" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/topics/{path}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"path"}}`, encodeURIComponent(String(_path))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a topic.
     */
    async deleteTopic(appId: string, path: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTopicRaw(appId, path, initOverrides);
    }

    /**
     * Query topics.
     */
    async getTopicsRaw(appId: string, requestParameters: TopicsGetTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfTopicDto>> {
        const _appId = appId;
        const _scope = requestParameters?.['scope'];
        const _query = requestParameters?.['query'];
        const _take = requestParameters?.['take'];
        const _skip = requestParameters?.['skip'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_scope != null) {
            queryParameters['Scope'] = _scope;
        }

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/topics`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfTopicDtoFromJSON(jsonValue));
    }

    /**
     * Query topics.
     */
    async getTopics(appId: string, requestParameters: TopicsGetTopicsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfTopicDto> {
        const response = await this.getTopicsRaw(appId, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upsert topics.
     */
    async postTopicsRaw(appId: string, upsertTopicsDto: UpsertTopicsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TopicDto>>> {
        const _appId = appId;
        const _upsertTopicsDto = upsertTopicsDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_upsertTopicsDto == null) {
            throw new runtime.RequiredError(
                'upsertTopicsDto',
                'Required parameter "upsertTopicsDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/topics`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertTopicsDtoToJSON(_upsertTopicsDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TopicDtoFromJSON));
    }

    /**
     * Upsert topics.
     */
    async postTopics(appId: string, upsertTopicsDto: UpsertTopicsDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TopicDto>> {
        const response = await this.postTopicsRaw(appId, upsertTopicsDto, initOverrides);
        return await response.value();
    }

}
