/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddContributorDto,
  AppDetailsDto,
  AppDto,
  AuthSchemeValueDto,
  ConfiguredIntegrationsDto,
  CreateIntegrationDto,
  IntegrationCreatedDto,
  UpdateIntegrationDto,
  UpsertAppDto,
} from '../models/index';
import {
    AddContributorDtoToJSON,
    AppDetailsDtoFromJSON,
    AppDtoFromJSON,
    AuthSchemeValueDtoFromJSON,
    AuthSchemeValueDtoToJSON,
    ConfiguredIntegrationsDtoFromJSON,
    CreateIntegrationDtoToJSON,
    IntegrationCreatedDtoFromJSON,
    UpdateIntegrationDtoToJSON,
    UpsertAppDtoToJSON,
} from '../models/index';

export interface AppsDeleteContributorRequestRaw {
    appId: string;
    contributorId: string;
}

export interface AppsDeleteIntegrationRequestRaw {
    appId: string;
    id: string;
}

export interface AppsGetAppRequestRaw {
    appId: string;
}

export interface AppsGetAuthSchemeRequestRaw {
    appId: string;
}

export interface AppsGetIntegrationsRequestRaw {
    appId: string;
}

export interface AppsPostAppRequestRaw {
    upsertAppDto: UpsertAppDto;
}

export interface AppsPostContributorRequestRaw {
    appId: string;
    addContributorDto: AddContributorDto;
}

export interface AppsPostIntegrationRequestRaw {
    appId: string;
    createIntegrationDto: CreateIntegrationDto;
}

export interface AppsPutAppRequestRaw {
    appId: string;
    upsertAppDto: UpsertAppDto;
}

export interface AppsPutIntegrationRequestRaw {
    appId: string;
    id: string;
    updateIntegrationDto: UpdateIntegrationDto;
}

export interface AppsUpsertAuthSchemeRequestRaw {
    appId: string;
    authSchemeValueDto: AuthSchemeValueDto;
}

/**
 * AppsApi - interface
 * 
 * @export
 * @interface AppsApiInterface
 */
export interface AppsApiInterface {
    /**
     * 
     * @summary Delete an app contributor.
     * @param {string} appId The ID of the app.
     * @param {string} contributorId The contributor to remove.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    deleteContributorRaw(appId: string, contributorId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDetailsDto>>;

    /**
     * Delete an app contributor.
     */
    deleteContributor(appId: string, contributorId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDetailsDto>;

    /**
     * 
     * @summary Delete an app integration.
     * @param {string} appId The ID of the app where the email templates belong to.
     * @param {string} id The ID of the integration.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    deleteIntegrationRaw(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete an app integration.
     */
    deleteIntegration(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Get app by ID.
     * @param {string} appId The ID of the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getAppRaw(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDetailsDto>>;

    /**
     * Get app by ID.
     */
    getApp(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDetailsDto>;

    /**
     * 
     * @summary Get the user apps.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getAppsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppDto>>>;

    /**
     * Get the user apps.
     */
    getApps(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppDto>>;

    /**
     * 
     * @summary Get app auth settings by ID.
     * @param {string} appId The ID of the app.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getAuthSchemeRaw(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeValueDto>>;

    /**
     * Get app auth settings by ID.
     */
    getAuthScheme(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeValueDto>;

    /**
     * 
     * @summary Get the app integrations.
     * @param {string} appId The ID of the app where the integrations belong to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    getIntegrationsRaw(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfiguredIntegrationsDto>>;

    /**
     * Get the app integrations.
     */
    getIntegrations(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfiguredIntegrationsDto>;

    /**
     * 
     * @summary Create an app.
     * @param {UpsertAppDto} upsertAppDto The request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    postAppRaw(upsertAppDto: UpsertAppDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>>;

    /**
     * Create an app.
     */
    postApp(upsertAppDto: UpsertAppDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto>;

    /**
     * 
     * @summary Add an app contributor.
     * @param {string} appId The ID of the app.
     * @param {AddContributorDto} addContributorDto The request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    postContributorRaw(appId: string, addContributorDto: AddContributorDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDetailsDto>>;

    /**
     * Add an app contributor.
     */
    postContributor(appId: string, addContributorDto: AddContributorDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDetailsDto>;

    /**
     * 
     * @summary Create an app integrations.
     * @param {string} appId The ID of the app where the integration belong to.
     * @param {CreateIntegrationDto} createIntegrationDto The request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    postIntegrationRaw(appId: string, createIntegrationDto: CreateIntegrationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationCreatedDto>>;

    /**
     * Create an app integrations.
     */
    postIntegration(appId: string, createIntegrationDto: CreateIntegrationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationCreatedDto>;

    /**
     * 
     * @summary Update an app.
     * @param {string} appId The app id to update.
     * @param {UpsertAppDto} upsertAppDto The request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    putAppRaw(appId: string, upsertAppDto: UpsertAppDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDetailsDto>>;

    /**
     * Update an app.
     */
    putApp(appId: string, upsertAppDto: UpsertAppDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDetailsDto>;

    /**
     * 
     * @summary Update an app integration.
     * @param {string} appId The ID of the app where the integration belong to.
     * @param {string} id The ID of the integration.
     * @param {UpdateIntegrationDto} updateIntegrationDto The request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    putIntegrationRaw(appId: string, id: string, updateIntegrationDto: UpdateIntegrationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Update an app integration.
     */
    putIntegration(appId: string, id: string, updateIntegrationDto: UpdateIntegrationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Updates the auth settings of the app.
     * @param {string} appId The ID of the app.
     * @param {AuthSchemeValueDto} authSchemeValueDto The request object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApiInterface
     */
    upsertAuthSchemeRaw(appId: string, authSchemeValueDto: AuthSchemeValueDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeValueDto>>;

    /**
     * Updates the auth settings of the app.
     */
    upsertAuthScheme(appId: string, authSchemeValueDto: AuthSchemeValueDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeValueDto>;

}

/**
 * 
 */
export class AppsApi extends runtime.BaseAPI implements AppsApiInterface {

    /**
     * Delete an app contributor.
     */
    async deleteContributorRaw(appId: string, contributorId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDetailsDto>> {
        const _appId = appId;
        const _contributorId = contributorId;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_contributorId == null) {
            throw new runtime.RequiredError(
                'contributorId',
                'Required parameter "contributorId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/contributors/{contributorId}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"contributorId"}}`, encodeURIComponent(String(_contributorId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppDetailsDtoFromJSON(jsonValue));
    }

    /**
     * Delete an app contributor.
     */
    async deleteContributor(appId: string, contributorId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDetailsDto> {
        const response = await this.deleteContributorRaw(appId, contributorId, initOverrides);
        return await response.value();
    }

    /**
     * Delete an app integration.
     */
    async deleteIntegrationRaw(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _id = id;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/integrations/{id}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an app integration.
     */
    async deleteIntegration(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIntegrationRaw(appId, id, initOverrides);
    }

    /**
     * Get app by ID.
     */
    async getAppRaw(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDetailsDto>> {
        const _appId = appId;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppDetailsDtoFromJSON(jsonValue));
    }

    /**
     * Get app by ID.
     */
    async getApp(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDetailsDto> {
        const response = await this.getAppRaw(appId, initOverrides);
        return await response.value();
    }

    /**
     * Get the user apps.
     */
    async getAppsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AppDto>>> {

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppDtoFromJSON));
    }

    /**
     * Get the user apps.
     */
    async getApps(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AppDto>> {
        const response = await this.getAppsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get app auth settings by ID.
     */
    async getAuthSchemeRaw(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeValueDto>> {
        const _appId = appId;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/auth`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSchemeValueDtoFromJSON(jsonValue));
    }

    /**
     * Get app auth settings by ID.
     */
    async getAuthScheme(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeValueDto> {
        const response = await this.getAuthSchemeRaw(appId, initOverrides);
        return await response.value();
    }

    /**
     * Get the app integrations.
     */
    async getIntegrationsRaw(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConfiguredIntegrationsDto>> {
        const _appId = appId;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/integrations`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfiguredIntegrationsDtoFromJSON(jsonValue));
    }

    /**
     * Get the app integrations.
     */
    async getIntegrations(appId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConfiguredIntegrationsDto> {
        const response = await this.getIntegrationsRaw(appId, initOverrides);
        return await response.value();
    }

    /**
     * Create an app.
     */
    async postAppRaw(upsertAppDto: UpsertAppDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDto>> {
        const _upsertAppDto = upsertAppDto;

        if (_upsertAppDto == null) {
            throw new runtime.RequiredError(
                'upsertAppDto',
                'Required parameter "upsertAppDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertAppDtoToJSON(_upsertAppDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppDtoFromJSON(jsonValue));
    }

    /**
     * Create an app.
     */
    async postApp(upsertAppDto: UpsertAppDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDto> {
        const response = await this.postAppRaw(upsertAppDto, initOverrides);
        return await response.value();
    }

    /**
     * Add an app contributor.
     */
    async postContributorRaw(appId: string, addContributorDto: AddContributorDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDetailsDto>> {
        const _appId = appId;
        const _addContributorDto = addContributorDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_addContributorDto == null) {
            throw new runtime.RequiredError(
                'addContributorDto',
                'Required parameter "addContributorDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/contributors`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddContributorDtoToJSON(_addContributorDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppDetailsDtoFromJSON(jsonValue));
    }

    /**
     * Add an app contributor.
     */
    async postContributor(appId: string, addContributorDto: AddContributorDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDetailsDto> {
        const response = await this.postContributorRaw(appId, addContributorDto, initOverrides);
        return await response.value();
    }

    /**
     * Create an app integrations.
     */
    async postIntegrationRaw(appId: string, createIntegrationDto: CreateIntegrationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IntegrationCreatedDto>> {
        const _appId = appId;
        const _createIntegrationDto = createIntegrationDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_createIntegrationDto == null) {
            throw new runtime.RequiredError(
                'createIntegrationDto',
                'Required parameter "createIntegrationDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/integration`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateIntegrationDtoToJSON(_createIntegrationDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IntegrationCreatedDtoFromJSON(jsonValue));
    }

    /**
     * Create an app integrations.
     */
    async postIntegration(appId: string, createIntegrationDto: CreateIntegrationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IntegrationCreatedDto> {
        const response = await this.postIntegrationRaw(appId, createIntegrationDto, initOverrides);
        return await response.value();
    }

    /**
     * Update an app.
     */
    async putAppRaw(appId: string, upsertAppDto: UpsertAppDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AppDetailsDto>> {
        const _appId = appId;
        const _upsertAppDto = upsertAppDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_upsertAppDto == null) {
            throw new runtime.RequiredError(
                'upsertAppDto',
                'Required parameter "upsertAppDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertAppDtoToJSON(_upsertAppDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AppDetailsDtoFromJSON(jsonValue));
    }

    /**
     * Update an app.
     */
    async putApp(appId: string, upsertAppDto: UpsertAppDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AppDetailsDto> {
        const response = await this.putAppRaw(appId, upsertAppDto, initOverrides);
        return await response.value();
    }

    /**
     * Update an app integration.
     */
    async putIntegrationRaw(appId: string, id: string, updateIntegrationDto: UpdateIntegrationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _id = id;
        const _updateIntegrationDto = updateIntegrationDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_updateIntegrationDto == null) {
            throw new runtime.RequiredError(
                'updateIntegrationDto',
                'Required parameter "updateIntegrationDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/integrations/{id}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIntegrationDtoToJSON(_updateIntegrationDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an app integration.
     */
    async putIntegration(appId: string, id: string, updateIntegrationDto: UpdateIntegrationDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putIntegrationRaw(appId, id, updateIntegrationDto, initOverrides);
    }

    /**
     * Updates the auth settings of the app.
     */
    async upsertAuthSchemeRaw(appId: string, authSchemeValueDto: AuthSchemeValueDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSchemeValueDto>> {
        const _appId = appId;
        const _authSchemeValueDto = authSchemeValueDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_authSchemeValueDto == null) {
            throw new runtime.RequiredError(
                'authSchemeValueDto',
                'Required parameter "authSchemeValueDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/auth`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSchemeValueDtoToJSON(_authSchemeValueDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSchemeValueDtoFromJSON(jsonValue));
    }

    /**
     * Updates the auth settings of the app.
     */
    async upsertAuthScheme(appId: string, authSchemeValueDto: AuthSchemeValueDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSchemeValueDto> {
        const response = await this.upsertAuthSchemeRaw(appId, authSchemeValueDto, initOverrides);
        return await response.value();
    }

}
