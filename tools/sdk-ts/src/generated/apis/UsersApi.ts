/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddAllowedTopicDto,
  ListResponseDtoOfSubscriptionDto,
  ListResponseDtoOfUserDto,
  SubscribeManyDto,
  UpsertUsersDto,
  UserDto,
} from '../models/index';
import {
    AddAllowedTopicDtoToJSON,
    ListResponseDtoOfSubscriptionDtoFromJSON,
    ListResponseDtoOfUserDtoFromJSON,
    SubscribeManyDtoToJSON,
    UpsertUsersDtoToJSON,
    UserDtoFromJSON,
} from '../models/index';

export interface UsersDeleteAllowedTopicRequestRaw {
    appId: string;
    id: string;
    prefix: string;
}

export interface UsersDeleteMobilePushTokenRequestRaw {
    appId: string;
    id: string;
    token: string;
}

export interface UsersDeleteSubscriptionRequestRaw {
    appId: string;
    id: string;
    prefix: string;
}

export interface UsersDeleteUserRequestRaw {
    appId: string;
    id: string;
}

export interface UsersDeleteWebPushSubscriptionRequestRaw {
    appId: string;
    id: string;
    endpoint: string;
}

export interface UsersGetSubscriptionsRequest {
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface UsersGetSubscriptionsRequestRaw {
    appId: string;
    id: string;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface UsersGetUserRequest {
    withDetails?: boolean;
}

export interface UsersGetUserRequestRaw {
    appId: string;
    id: string;
    withDetails?: boolean;
}

export interface UsersGetUsersRequest {
    query?: string | null;
    take?: number;
    skip?: number;
    withDetails?: boolean;
}

export interface UsersGetUsersRequestRaw {
    appId: string;
    query?: string | null;
    take?: number;
    skip?: number;
    withDetails?: boolean;
}

export interface UsersPostAllowedTopicRequestRaw {
    appId: string;
    id: string;
    addAllowedTopicDto: AddAllowedTopicDto;
}

export interface UsersPostSubscriptionsRequestRaw {
    appId: string;
    id: string;
    subscribeManyDto: SubscribeManyDto;
}

export interface UsersPostUsersRequestRaw {
    appId: string;
    upsertUsersDto: UpsertUsersDto;
}

/**
 * UsersApi - interface
 * 
 * @export
 * @interface UsersApiInterface
 */
export interface UsersApiInterface {
    /**
     * 
     * @summary Remove an allowed topic.
     * @param {string} appId The app where the users belong to.
     * @param {string} id The user ID.
     * @param {string} prefix The topic prefix.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteAllowedTopicRaw(appId: string, id: string, prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove an allowed topic.
     */
    deleteAllowedTopic(appId: string, id: string, prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Remove an web push token.
     * @param {string} appId The app where the users belong to.
     * @param {string} id The user ID.
     * @param {string} token The token.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteMobilePushTokenRaw(appId: string, id: string, token: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove an web push token.
     */
    deleteMobilePushToken(appId: string, id: string, token: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Unsubscribes a user from a subscription.
     * @param {string} appId The app where the user belongs to.
     * @param {string} id The user ID.
     * @param {string} prefix The topic prefix.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteSubscriptionRaw(appId: string, id: string, prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Unsubscribes a user from a subscription.
     */
    deleteSubscription(appId: string, id: string, prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Delete a user.
     * @param {string} appId The app where the users belongs to.
     * @param {string} id The user id to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteUserRaw(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a user.
     */
    deleteUser(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Remove an web push subscription.
     * @param {string} appId The app where the users belong to.
     * @param {string} id The user ID.
     * @param {string} endpoint The endpoint.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    deleteWebPushSubscriptionRaw(appId: string, id: string, endpoint: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Remove an web push subscription.
     */
    deleteWebPushSubscription(appId: string, id: string, endpoint: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Query user subscriptions.
     * @param {string} appId The app where the user belongs to.
     * @param {string} id The user ID.
     * @param {string} [query] The optional query to search for items.
     * @param {number} [take] The number of items to return.
     * @param {number} [skip] The number of items to skip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getSubscriptionsRaw(appId: string, id: string, requestParameters?: UsersGetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfSubscriptionDto>>;

    /**
     * Query user subscriptions.
     */
    getSubscriptions(appId: string, id: string, requestParameters?: UsersGetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfSubscriptionDto>;

    /**
     * 
     * @summary Get a user.
     * @param {string} appId The app where the user belongs to.
     * @param {string} id The user ID.
     * @param {boolean} [withDetails] Provide extra details, might be expensive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUserRaw(appId: string, id: string, requestParameters?: UsersGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>>;

    /**
     * Get a user.
     */
    getUser(appId: string, id: string, requestParameters?: UsersGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto>;

    /**
     * 
     * @summary Query users.
     * @param {string} appId The app where the users belongs to.
     * @param {string} [query] The optional query to search for items.
     * @param {number} [take] The number of items to return.
     * @param {number} [skip] The number of items to skip.
     * @param {boolean} [withDetails] Provide extra details, might be expensive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    getUsersRaw(appId: string, requestParameters?: UsersGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserDto>>;

    /**
     * Query users.
     */
    getUsers(appId: string, requestParameters?: UsersGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserDto>;

    /**
     * 
     * @summary Add an allowed topic.
     * @param {string} appId The app where the users belong to.
     * @param {string} id The user ID.
     * @param {AddAllowedTopicDto} addAllowedTopicDto The upsert request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    postAllowedTopicRaw(appId: string, id: string, addAllowedTopicDto: AddAllowedTopicDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Add an allowed topic.
     */
    postAllowedTopic(appId: string, id: string, addAllowedTopicDto: AddAllowedTopicDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Upserts or deletes multiple user subscriptions.
     * @param {string} appId The app where the user belongs to.
     * @param {string} id The user ID.
     * @param {SubscribeManyDto} subscribeManyDto The subscription object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    postSubscriptionsRaw(appId: string, id: string, subscribeManyDto: SubscribeManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Upserts or deletes multiple user subscriptions.
     */
    postSubscriptions(appId: string, id: string, subscribeManyDto: SubscribeManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Upsert users.
     * @param {string} appId The app where the users belong to.
     * @param {UpsertUsersDto} upsertUsersDto The upsert request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    postUsersRaw(appId: string, upsertUsersDto: UpsertUsersDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserDto>>>;

    /**
     * Upsert users.
     */
    postUsers(appId: string, upsertUsersDto: UpsertUsersDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserDto>>;

}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI implements UsersApiInterface {

    /**
     * Remove an allowed topic.
     */
    async deleteAllowedTopicRaw(appId: string, id: string, prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _id = id;
        const _prefix = prefix;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_prefix == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/users/{id}/allowed-topics/{prefix}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))).replace(`{${"prefix"}}`, encodeURIComponent(String(_prefix))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an allowed topic.
     */
    async deleteAllowedTopic(appId: string, id: string, prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAllowedTopicRaw(appId, id, prefix, initOverrides);
    }

    /**
     * Remove an web push token.
     */
    async deleteMobilePushTokenRaw(appId: string, id: string, token: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _id = id;
        const _token = token;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_token == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/users/{id}/mobilepush/{token}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))).replace(`{${"token"}}`, encodeURIComponent(String(_token))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an web push token.
     */
    async deleteMobilePushToken(appId: string, id: string, token: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteMobilePushTokenRaw(appId, id, token, initOverrides);
    }

    /**
     * Unsubscribes a user from a subscription.
     */
    async deleteSubscriptionRaw(appId: string, id: string, prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _id = id;
        const _prefix = prefix;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_prefix == null) {
            throw new runtime.RequiredError(
                'prefix',
                'Required parameter "prefix" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/users/{id}/subscriptions/{prefix}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))).replace(`{${"prefix"}}`, encodeURIComponent(String(_prefix))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Unsubscribes a user from a subscription.
     */
    async deleteSubscription(appId: string, id: string, prefix: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSubscriptionRaw(appId, id, prefix, initOverrides);
    }

    /**
     * Delete a user.
     */
    async deleteUserRaw(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _id = id;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/users/{id}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a user.
     */
    async deleteUser(appId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserRaw(appId, id, initOverrides);
    }

    /**
     * Remove an web push subscription.
     */
    async deleteWebPushSubscriptionRaw(appId: string, id: string, endpoint: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _id = id;
        const _endpoint = endpoint;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_endpoint == null) {
            throw new runtime.RequiredError(
                'endpoint',
                'Required parameter "endpoint" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/users/{id}/webpush/{endpoint}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))).replace(`{${"endpoint"}}`, encodeURIComponent(String(_endpoint))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove an web push subscription.
     */
    async deleteWebPushSubscription(appId: string, id: string, endpoint: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteWebPushSubscriptionRaw(appId, id, endpoint, initOverrides);
    }

    /**
     * Query user subscriptions.
     */
    async getSubscriptionsRaw(appId: string, id: string, requestParameters: UsersGetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfSubscriptionDto>> {
        const _appId = appId;
        const _id = id;
        const _query = requestParameters?.['query'];
        const _take = requestParameters?.['take'];
        const _skip = requestParameters?.['skip'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/users/{id}/subscriptions`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfSubscriptionDtoFromJSON(jsonValue));
    }

    /**
     * Query user subscriptions.
     */
    async getSubscriptions(appId: string, id: string, requestParameters: UsersGetSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfSubscriptionDto> {
        const response = await this.getSubscriptionsRaw(appId, id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a user.
     */
    async getUserRaw(appId: string, id: string, requestParameters: UsersGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        const _appId = appId;
        const _id = id;
        const _withDetails = requestParameters?.['withDetails'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_withDetails != null) {
            queryParameters['withDetails'] = _withDetails;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/users/{id}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Get a user.
     */
    async getUser(appId: string, id: string, requestParameters: UsersGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.getUserRaw(appId, id, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query users.
     */
    async getUsersRaw(appId: string, requestParameters: UsersGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfUserDto>> {
        const _appId = appId;
        const _query = requestParameters?.['query'];
        const _take = requestParameters?.['take'];
        const _skip = requestParameters?.['skip'];
        const _withDetails = requestParameters?.['withDetails'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        if (_withDetails != null) {
            queryParameters['withDetails'] = _withDetails;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/users`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfUserDtoFromJSON(jsonValue));
    }

    /**
     * Query users.
     */
    async getUsers(appId: string, requestParameters: UsersGetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfUserDto> {
        const response = await this.getUsersRaw(appId, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add an allowed topic.
     */
    async postAllowedTopicRaw(appId: string, id: string, addAllowedTopicDto: AddAllowedTopicDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _id = id;
        const _addAllowedTopicDto = addAllowedTopicDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_addAllowedTopicDto == null) {
            throw new runtime.RequiredError(
                'addAllowedTopicDto',
                'Required parameter "addAllowedTopicDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/users/{id}/allowed-topics`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddAllowedTopicDtoToJSON(_addAllowedTopicDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Add an allowed topic.
     */
    async postAllowedTopic(appId: string, id: string, addAllowedTopicDto: AddAllowedTopicDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postAllowedTopicRaw(appId, id, addAllowedTopicDto, initOverrides);
    }

    /**
     * Upserts or deletes multiple user subscriptions.
     */
    async postSubscriptionsRaw(appId: string, id: string, subscribeManyDto: SubscribeManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _id = id;
        const _subscribeManyDto = subscribeManyDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_id == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling ().'
            );
        }

        if (_subscribeManyDto == null) {
            throw new runtime.RequiredError(
                'subscribeManyDto',
                'Required parameter "subscribeManyDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/users/{id}/subscriptions`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"id"}}`, encodeURIComponent(String(_id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscribeManyDtoToJSON(_subscribeManyDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upserts or deletes multiple user subscriptions.
     */
    async postSubscriptions(appId: string, id: string, subscribeManyDto: SubscribeManyDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postSubscriptionsRaw(appId, id, subscribeManyDto, initOverrides);
    }

    /**
     * Upsert users.
     */
    async postUsersRaw(appId: string, upsertUsersDto: UpsertUsersDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserDto>>> {
        const _appId = appId;
        const _upsertUsersDto = upsertUsersDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_upsertUsersDto == null) {
            throw new runtime.RequiredError(
                'upsertUsersDto',
                'Required parameter "upsertUsersDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/users`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertUsersDtoToJSON(_upsertUsersDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDtoFromJSON));
    }

    /**
     * Upsert users.
     */
    async postUsers(appId: string, upsertUsersDto: UpsertUsersDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserDto>> {
        const response = await this.postUsersRaw(appId, upsertUsersDto, initOverrides);
        return await response.value();
    }

}
