/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListResponseDtoOfTemplateDto,
  TemplateDto,
  UpsertTemplatesDto,
} from '../models/index';
import {
    ListResponseDtoOfTemplateDtoFromJSON,
    TemplateDtoFromJSON,
    UpsertTemplatesDtoToJSON,
} from '../models/index';

export interface TemplatesDeleteTemplateRequestRaw {
    appId: string;
    code: string;
}

export interface TemplatesGetTemplatesRequest {
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface TemplatesGetTemplatesRequestRaw {
    appId: string;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface TemplatesPostTemplatesRequestRaw {
    appId: string;
    upsertTemplatesDto: UpsertTemplatesDto;
}

/**
 * TemplatesApi - interface
 * 
 * @export
 * @interface TemplatesApiInterface
 */
export interface TemplatesApiInterface {
    /**
     * 
     * @summary Delete a template.
     * @param {string} appId The app where the templates belong to.
     * @param {string} code The template code to delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiInterface
     */
    deleteTemplateRaw(appId: string, code: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a template.
     */
    deleteTemplate(appId: string, code: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Query templates.
     * @param {string} appId The app where the templates belongs to.
     * @param {string} [query] The optional query to search for items.
     * @param {number} [take] The number of items to return.
     * @param {number} [skip] The number of items to skip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiInterface
     */
    getTemplatesRaw(appId: string, requestParameters?: TemplatesGetTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfTemplateDto>>;

    /**
     * Query templates.
     */
    getTemplates(appId: string, requestParameters?: TemplatesGetTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfTemplateDto>;

    /**
     * 
     * @summary Upsert templates.
     * @param {string} appId The app where the templates belong to.
     * @param {UpsertTemplatesDto} upsertTemplatesDto The upsert request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplatesApiInterface
     */
    postTemplatesRaw(appId: string, upsertTemplatesDto: UpsertTemplatesDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TemplateDto>>>;

    /**
     * Upsert templates.
     */
    postTemplates(appId: string, upsertTemplatesDto: UpsertTemplatesDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TemplateDto>>;

}

/**
 * 
 */
export class TemplatesApi extends runtime.BaseAPI implements TemplatesApiInterface {

    /**
     * Delete a template.
     */
    async deleteTemplateRaw(appId: string, code: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _code = code;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_code == null) {
            throw new runtime.RequiredError(
                'code',
                'Required parameter "code" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/templates/{code}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"code"}}`, encodeURIComponent(String(_code))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a template.
     */
    async deleteTemplate(appId: string, code: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTemplateRaw(appId, code, initOverrides);
    }

    /**
     * Query templates.
     */
    async getTemplatesRaw(appId: string, requestParameters: TemplatesGetTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfTemplateDto>> {
        const _appId = appId;
        const _query = requestParameters?.['query'];
        const _take = requestParameters?.['take'];
        const _skip = requestParameters?.['skip'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/templates`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfTemplateDtoFromJSON(jsonValue));
    }

    /**
     * Query templates.
     */
    async getTemplates(appId: string, requestParameters: TemplatesGetTemplatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfTemplateDto> {
        const response = await this.getTemplatesRaw(appId, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upsert templates.
     */
    async postTemplatesRaw(appId: string, upsertTemplatesDto: UpsertTemplatesDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TemplateDto>>> {
        const _appId = appId;
        const _upsertTemplatesDto = upsertTemplatesDto;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_upsertTemplatesDto == null) {
            throw new runtime.RequiredError(
                'upsertTemplatesDto',
                'Required parameter "upsertTemplatesDto" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/apps/{appId}/templates`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertTemplatesDtoToJSON(_upsertTemplatesDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TemplateDtoFromJSON));
    }

    /**
     * Upsert templates.
     */
    async postTemplates(appId: string, upsertTemplatesDto: UpsertTemplatesDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TemplateDto>> {
        const response = await this.postTemplatesRaw(appId, upsertTemplatesDto, initOverrides);
        return await response.value();
    }

}
