/**
 * Notifo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ListResponseDtoOfMediaDto,
  ResizeMode,
} from '../models/index';
import {
    ListResponseDtoOfMediaDtoFromJSON,
} from '../models/index';

export interface MediaDeleteRequestRaw {
    appId: string;
    fileName: string;
}

export interface MediaDownloadRequest {
    cache?: number;
    download?: number;
    bg?: string | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    preset?: string | null;
    mode?: ResizeMode;
    focusX?: number | null;
    focusY?: number | null;
    force?: boolean;
    emptyOnFailure?: boolean;
}

export interface MediaDownloadRequestRaw {
    appId: string;
    fileName: string;
    cache?: number;
    download?: number;
    bg?: string | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    preset?: string | null;
    mode?: ResizeMode;
    focusX?: number | null;
    focusY?: number | null;
    force?: boolean;
    emptyOnFailure?: boolean;
}

export interface MediaDownload2Request {
    cache?: number;
    download?: number;
    bg?: string | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    preset?: string | null;
    mode?: ResizeMode;
    focusX?: number | null;
    focusY?: number | null;
    force?: boolean;
    emptyOnFailure?: boolean;
}

export interface MediaDownload2RequestRaw {
    appId: string;
    fileName: string;
    cache?: number;
    download?: number;
    bg?: string | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    preset?: string | null;
    mode?: ResizeMode;
    focusX?: number | null;
    focusY?: number | null;
    force?: boolean;
    emptyOnFailure?: boolean;
}

export interface MediaDownload3Request {
    cache?: number;
    download?: number;
    bg?: string | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    preset?: string | null;
    mode?: ResizeMode;
    focusX?: number | null;
    focusY?: number | null;
    force?: boolean;
    emptyOnFailure?: boolean;
}

export interface MediaDownload3RequestRaw {
    appId: string;
    fileName: string;
    cache?: number;
    download?: number;
    bg?: string | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    preset?: string | null;
    mode?: ResizeMode;
    focusX?: number | null;
    focusY?: number | null;
    force?: boolean;
    emptyOnFailure?: boolean;
}

export interface MediaGetMediasRequest {
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface MediaGetMediasRequestRaw {
    appId: string;
    query?: string | null;
    take?: number;
    skip?: number;
}

export interface MediaProxyProxyImageRequest {
    url?: string;
    cache?: number;
    download?: number;
    bg?: string | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    preset?: string | null;
    mode?: ResizeMode;
    focusX?: number | null;
    focusY?: number | null;
    force?: boolean;
    emptyOnFailure?: boolean;
}

export interface MediaProxyProxyImageRequestRaw {
    url?: string;
    cache?: number;
    download?: number;
    bg?: string | null;
    width?: number | null;
    height?: number | null;
    quality?: number | null;
    preset?: string | null;
    mode?: ResizeMode;
    focusX?: number | null;
    focusY?: number | null;
    force?: boolean;
    emptyOnFailure?: boolean;
}

export interface MediaUploadRequest {
    file?: Blob;
}

export interface MediaUploadRequestRaw {
    appId: string;
    file?: Blob;
}

/**
 * MediaApi - interface
 * 
 * @export
 * @interface MediaApiInterface
 */
export interface MediaApiInterface {
    /**
     * 
     * @summary Delete a media.
     * @param {string} appId The app id where the media belongs to.
     * @param {string} fileName The file name of the media.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    deleteRaw(appId: string, fileName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Delete a media.
     */
    delete(appId: string, fileName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @summary Download a media object.
     * @param {string} appId The app id where the media belongs to.
     * @param {string} fileName The name of the media to download.
     * @param {number} [cache] The cache duration.
     * @param {number} [download] Set it to 1 to create a download response.
     * @param {string} [bg] Optional background color.
     * @param {number} [width] The target width when an image.
     * @param {number} [height] The target height when an image.
     * @param {number} [quality] The target quality when an image.
     * @param {string} [preset] A preset dimension.
     * @param {ResizeMode} [mode] The resize mode.
     * @param {number} [focusX] The x position of the focues point.
     * @param {number} [focusY] The y position of the focues point.
     * @param {boolean} [force] True to resize it and clear the cache.
     * @param {boolean} [emptyOnFailure] True, to return an empty image on failure.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    downloadRaw(appId: string, fileName: string, requestParameters?: MediaDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Download a media object.
     */
    download(appId: string, fileName: string, requestParameters?: MediaDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Download a media object.
     * @param {string} appId The app id where the media belongs to.
     * @param {string} fileName The name of the media to download.
     * @param {number} [cache] The cache duration.
     * @param {number} [download] Set it to 1 to create a download response.
     * @param {string} [bg] Optional background color.
     * @param {number} [width] The target width when an image.
     * @param {number} [height] The target height when an image.
     * @param {number} [quality] The target quality when an image.
     * @param {string} [preset] A preset dimension.
     * @param {ResizeMode} [mode] The resize mode.
     * @param {number} [focusX] The x position of the focues point.
     * @param {number} [focusY] The y position of the focues point.
     * @param {boolean} [force] True to resize it and clear the cache.
     * @param {boolean} [emptyOnFailure] True, to return an empty image on failure.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    download2Raw(appId: string, fileName: string, requestParameters?: MediaDownload2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Download a media object.
     */
    download2(appId: string, fileName: string, requestParameters?: MediaDownload2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Download a media object.
     * @param {string} appId The app id where the media belongs to.
     * @param {string} fileName The name of the media to download.
     * @param {number} [cache] The cache duration.
     * @param {number} [download] Set it to 1 to create a download response.
     * @param {string} [bg] Optional background color.
     * @param {number} [width] The target width when an image.
     * @param {number} [height] The target height when an image.
     * @param {number} [quality] The target quality when an image.
     * @param {string} [preset] A preset dimension.
     * @param {ResizeMode} [mode] The resize mode.
     * @param {number} [focusX] The x position of the focues point.
     * @param {number} [focusY] The y position of the focues point.
     * @param {boolean} [force] True to resize it and clear the cache.
     * @param {boolean} [emptyOnFailure] True, to return an empty image on failure.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    download3Raw(appId: string, fileName: string, requestParameters?: MediaDownload3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Download a media object.
     */
    download3(appId: string, fileName: string, requestParameters?: MediaDownload3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Query media items.
     * @param {string} appId The app where the media belongs to.
     * @param {string} [query] The optional query to search for items.
     * @param {number} [take] The number of items to return.
     * @param {number} [skip] The number of items to skip.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    getMediasRaw(appId: string, requestParameters?: MediaGetMediasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfMediaDto>>;

    /**
     * Query media items.
     */
    getMedias(appId: string, requestParameters?: MediaGetMediasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfMediaDto>;

    /**
     * 
     * @summary Download a media object.
     * @param {string} [url] The app id where the media belongs to.
     * @param {number} [cache] The cache duration.
     * @param {number} [download] Set it to 1 to create a download response.
     * @param {string} [bg] Optional background color.
     * @param {number} [width] The target width when an image.
     * @param {number} [height] The target height when an image.
     * @param {number} [quality] The target quality when an image.
     * @param {string} [preset] A preset dimension.
     * @param {ResizeMode} [mode] The resize mode.
     * @param {number} [focusX] The x position of the focues point.
     * @param {number} [focusY] The y position of the focues point.
     * @param {boolean} [force] True to resize it and clear the cache.
     * @param {boolean} [emptyOnFailure] True, to return an empty image on failure.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    proxyImageRaw(requestParameters?: MediaProxyProxyImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Download a media object.
     */
    proxyImage(requestParameters?: MediaProxyProxyImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     * 
     * @summary Upload a media object.
     * @param {string} appId The app id where the media belongs to.
     * @param {Blob} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApiInterface
     */
    uploadRaw(appId: string, requestParameters?: MediaUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Upload a media object.
     */
    upload(appId: string, requestParameters?: MediaUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class MediaApi extends runtime.BaseAPI implements MediaApiInterface {

    /**
     * Delete a media.
     */
    async deleteRaw(appId: string, fileName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _fileName = fileName;

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_fileName == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/media/{fileName}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"fileName"}}`, encodeURIComponent(String(_fileName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a media.
     */
    async delete(appId: string, fileName: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRaw(appId, fileName, initOverrides);
    }

    /**
     * Download a media object.
     */
    async downloadRaw(appId: string, fileName: string, requestParameters: MediaDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const _appId = appId;
        const _fileName = fileName;
        const _cache = requestParameters?.['cache'];
        const _download = requestParameters?.['download'];
        const _bg = requestParameters?.['bg'];
        const _width = requestParameters?.['width'];
        const _height = requestParameters?.['height'];
        const _quality = requestParameters?.['quality'];
        const _preset = requestParameters?.['preset'];
        const _mode = requestParameters?.['mode'];
        const _focusX = requestParameters?.['focusX'];
        const _focusY = requestParameters?.['focusY'];
        const _force = requestParameters?.['force'];
        const _emptyOnFailure = requestParameters?.['emptyOnFailure'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_fileName == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_cache != null) {
            queryParameters['cache'] = _cache;
        }

        if (_download != null) {
            queryParameters['download'] = _download;
        }

        if (_bg != null) {
            queryParameters['bg'] = _bg;
        }

        if (_width != null) {
            queryParameters['width'] = _width;
        }

        if (_height != null) {
            queryParameters['height'] = _height;
        }

        if (_quality != null) {
            queryParameters['quality'] = _quality;
        }

        if (_preset != null) {
            queryParameters['preset'] = _preset;
        }

        if (_mode != null) {
            queryParameters['mode'] = _mode;
        }

        if (_focusX != null) {
            queryParameters['focusX'] = _focusX;
        }

        if (_focusY != null) {
            queryParameters['focusY'] = _focusY;
        }

        if (_force != null) {
            queryParameters['force'] = _force;
        }

        if (_emptyOnFailure != null) {
            queryParameters['emptyOnFailure'] = _emptyOnFailure;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/media/{fileName}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"fileName"}}`, encodeURIComponent(String(_fileName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download a media object.
     */
    async download(appId: string, fileName: string, requestParameters: MediaDownloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.downloadRaw(appId, fileName, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download a media object.
     */
    async download2Raw(appId: string, fileName: string, requestParameters: MediaDownload2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const _appId = appId;
        const _fileName = fileName;
        const _cache = requestParameters?.['cache'];
        const _download = requestParameters?.['download'];
        const _bg = requestParameters?.['bg'];
        const _width = requestParameters?.['width'];
        const _height = requestParameters?.['height'];
        const _quality = requestParameters?.['quality'];
        const _preset = requestParameters?.['preset'];
        const _mode = requestParameters?.['mode'];
        const _focusX = requestParameters?.['focusX'];
        const _focusY = requestParameters?.['focusY'];
        const _force = requestParameters?.['force'];
        const _emptyOnFailure = requestParameters?.['emptyOnFailure'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_fileName == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_cache != null) {
            queryParameters['cache'] = _cache;
        }

        if (_download != null) {
            queryParameters['download'] = _download;
        }

        if (_bg != null) {
            queryParameters['bg'] = _bg;
        }

        if (_width != null) {
            queryParameters['width'] = _width;
        }

        if (_height != null) {
            queryParameters['height'] = _height;
        }

        if (_quality != null) {
            queryParameters['quality'] = _quality;
        }

        if (_preset != null) {
            queryParameters['preset'] = _preset;
        }

        if (_mode != null) {
            queryParameters['mode'] = _mode;
        }

        if (_focusX != null) {
            queryParameters['focusX'] = _focusX;
        }

        if (_focusY != null) {
            queryParameters['focusY'] = _focusY;
        }

        if (_force != null) {
            queryParameters['force'] = _force;
        }

        if (_emptyOnFailure != null) {
            queryParameters['emptyOnFailure'] = _emptyOnFailure;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/asset/{appId}/{fileName}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"fileName"}}`, encodeURIComponent(String(_fileName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download a media object.
     */
    async download2(appId: string, fileName: string, requestParameters: MediaDownload2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.download2Raw(appId, fileName, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download a media object.
     */
    async download3Raw(appId: string, fileName: string, requestParameters: MediaDownload3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const _appId = appId;
        const _fileName = fileName;
        const _cache = requestParameters?.['cache'];
        const _download = requestParameters?.['download'];
        const _bg = requestParameters?.['bg'];
        const _width = requestParameters?.['width'];
        const _height = requestParameters?.['height'];
        const _quality = requestParameters?.['quality'];
        const _preset = requestParameters?.['preset'];
        const _mode = requestParameters?.['mode'];
        const _focusX = requestParameters?.['focusX'];
        const _focusY = requestParameters?.['focusY'];
        const _force = requestParameters?.['force'];
        const _emptyOnFailure = requestParameters?.['emptyOnFailure'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        if (_fileName == null) {
            throw new runtime.RequiredError(
                'fileName',
                'Required parameter "fileName" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_cache != null) {
            queryParameters['cache'] = _cache;
        }

        if (_download != null) {
            queryParameters['download'] = _download;
        }

        if (_bg != null) {
            queryParameters['bg'] = _bg;
        }

        if (_width != null) {
            queryParameters['width'] = _width;
        }

        if (_height != null) {
            queryParameters['height'] = _height;
        }

        if (_quality != null) {
            queryParameters['quality'] = _quality;
        }

        if (_preset != null) {
            queryParameters['preset'] = _preset;
        }

        if (_mode != null) {
            queryParameters['mode'] = _mode;
        }

        if (_focusX != null) {
            queryParameters['focusX'] = _focusX;
        }

        if (_focusY != null) {
            queryParameters['focusY'] = _focusY;
        }

        if (_force != null) {
            queryParameters['force'] = _force;
        }

        if (_emptyOnFailure != null) {
            queryParameters['emptyOnFailure'] = _emptyOnFailure;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/assets/{appId}/{fileName}`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))).replace(`{${"fileName"}}`, encodeURIComponent(String(_fileName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download a media object.
     */
    async download3(appId: string, fileName: string, requestParameters: MediaDownload3Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.download3Raw(appId, fileName, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Query media items.
     */
    async getMediasRaw(appId: string, requestParameters: MediaGetMediasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListResponseDtoOfMediaDto>> {
        const _appId = appId;
        const _query = requestParameters?.['query'];
        const _take = requestParameters?.['take'];
        const _skip = requestParameters?.['skip'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        if (_query != null) {
            queryParameters['query'] = _query;
        }

        if (_take != null) {
            queryParameters['take'] = _take;
        }

        if (_skip != null) {
            queryParameters['skip'] = _skip;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/apps/{appId}/media`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListResponseDtoOfMediaDtoFromJSON(jsonValue));
    }

    /**
     * Query media items.
     */
    async getMedias(appId: string, requestParameters: MediaGetMediasRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListResponseDtoOfMediaDto> {
        const response = await this.getMediasRaw(appId, requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Download a media object.
     */
    async proxyImageRaw(requestParameters: MediaProxyProxyImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>> {
        const _url = requestParameters?.['url'];
        const _cache = requestParameters?.['cache'];
        const _download = requestParameters?.['download'];
        const _bg = requestParameters?.['bg'];
        const _width = requestParameters?.['width'];
        const _height = requestParameters?.['height'];
        const _quality = requestParameters?.['quality'];
        const _preset = requestParameters?.['preset'];
        const _mode = requestParameters?.['mode'];
        const _focusX = requestParameters?.['focusX'];
        const _focusY = requestParameters?.['focusY'];
        const _force = requestParameters?.['force'];
        const _emptyOnFailure = requestParameters?.['emptyOnFailure'];

        const queryParameters: any = {};

        if (_url != null) {
            queryParameters['url'] = _url;
        }

        if (_cache != null) {
            queryParameters['cache'] = _cache;
        }

        if (_download != null) {
            queryParameters['download'] = _download;
        }

        if (_bg != null) {
            queryParameters['bg'] = _bg;
        }

        if (_width != null) {
            queryParameters['width'] = _width;
        }

        if (_height != null) {
            queryParameters['height'] = _height;
        }

        if (_quality != null) {
            queryParameters['quality'] = _quality;
        }

        if (_preset != null) {
            queryParameters['preset'] = _preset;
        }

        if (_mode != null) {
            queryParameters['mode'] = _mode;
        }

        if (_focusX != null) {
            queryParameters['focusX'] = _focusX;
        }

        if (_focusY != null) {
            queryParameters['focusY'] = _focusY;
        }

        if (_force != null) {
            queryParameters['force'] = _force;
        }

        if (_emptyOnFailure != null) {
            queryParameters['emptyOnFailure'] = _emptyOnFailure;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/assets/proxy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Download a media object.
     */
    async proxyImage(requestParameters: MediaProxyProxyImageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.proxyImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a media object.
     */
    async uploadRaw(appId: string, requestParameters: MediaUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const _appId = appId;
        const _file = requestParameters?.['file'];

        if (_appId == null) {
            throw new runtime.RequiredError(
                'appId',
                'Required parameter "appId" was null or undefined when calling ().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (_file != null) {
            formParams.append('file', _file as any);
        }

        const response = await this.request({
            path: `/api/apps/{appId}/media`.replace(`{${"appId"}}`, encodeURIComponent(String(_appId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload a media object.
     */
    async upload(appId: string, requestParameters: MediaUploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadRaw(appId, requestParameters, initOverrides);
    }

}
